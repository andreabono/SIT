/*
 * Apollo Web Services
 *  # Rate limit:   The **Rate Limit** and **Rate Reset** are specified in the HTTP-header with `X-RateLimit-Limit` and `X-RateLimit-Reset`; the rate limit is *per* `IP`.
 *
 * The version of the OpenAPI document: 2.32.0
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.apollo.api;

import org.ingv.apollo.ApiCallback;
import org.ingv.apollo.ApiClient;
import org.ingv.apollo.ApiException;
import org.ingv.apollo.ApiResponse;
import org.ingv.apollo.Configuration;
import org.ingv.apollo.Pair;
import org.ingv.apollo.ProgressRequestBody;
import org.ingv.apollo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.ingv.apollo.model.Hyp2000arcSchema;
import java.time.OffsetDateTime;
import org.ingv.apollo.model.Problem;
import org.ingv.apollo.model.V2PostHyp2000Request;
import org.ingv.apollo.model.V2PostPyML200Response;
import org.ingv.apollo.model.V2PostPyMLRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2GetStation
     * @param net Network (required)
     * @param sta Station (required)
     * @param cha Channel (required)
     * @param starttime Select date start (i.e. 2016-06-22T16:52:06.260Z). (optional)
     * @param endtime Select date end (i.e. 2016-06-22T16:52:06.260Z). (optional)
     * @param loc Location (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2GetStationCall(String net, String sta, String cha, OffsetDateTime starttime, OffsetDateTime endtime, String loc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/location/v2/station-hinv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (starttime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starttime", starttime));
        }

        if (endtime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endtime", endtime));
        }

        if (net != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("net", net));
        }

        if (sta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sta", sta));
        }

        if (cha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cha", cha));
        }

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2GetStationValidateBeforeCall(String net, String sta, String cha, OffsetDateTime starttime, OffsetDateTime endtime, String loc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'net' is set
        if (net == null) {
            throw new ApiException("Missing the required parameter 'net' when calling v2GetStation(Async)");
        }

        // verify the required parameter 'sta' is set
        if (sta == null) {
            throw new ApiException("Missing the required parameter 'sta' when calling v2GetStation(Async)");
        }

        // verify the required parameter 'cha' is set
        if (cha == null) {
            throw new ApiException("Missing the required parameter 'cha' when calling v2GetStation(Async)");
        }

        return v2GetStationCall(net, sta, cha, starttime, endtime, loc, _callback);

    }

    /**
     * Get \&quot;station file\&quot; line for hyp2000
     * Get \&quot;station file\&quot; line for hyp2000
     * @param net Network (required)
     * @param sta Station (required)
     * @param cha Channel (required)
     * @param starttime Select date start (i.e. 2016-06-22T16:52:06.260Z). (optional)
     * @param endtime Select date end (i.e. 2016-06-22T16:52:06.260Z). (optional)
     * @param loc Location (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void v2GetStation(String net, String sta, String cha, OffsetDateTime starttime, OffsetDateTime endtime, String loc) throws ApiException {
        v2GetStationWithHttpInfo(net, sta, cha, starttime, endtime, loc);
    }

    /**
     * Get \&quot;station file\&quot; line for hyp2000
     * Get \&quot;station file\&quot; line for hyp2000
     * @param net Network (required)
     * @param sta Station (required)
     * @param cha Channel (required)
     * @param starttime Select date start (i.e. 2016-06-22T16:52:06.260Z). (optional)
     * @param endtime Select date end (i.e. 2016-06-22T16:52:06.260Z). (optional)
     * @param loc Location (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2GetStationWithHttpInfo(String net, String sta, String cha, OffsetDateTime starttime, OffsetDateTime endtime, String loc) throws ApiException {
        okhttp3.Call localVarCall = v2GetStationValidateBeforeCall(net, sta, cha, starttime, endtime, loc, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get \&quot;station file\&quot; line for hyp2000 (asynchronously)
     * Get \&quot;station file\&quot; line for hyp2000
     * @param net Network (required)
     * @param sta Station (required)
     * @param cha Channel (required)
     * @param starttime Select date start (i.e. 2016-06-22T16:52:06.260Z). (optional)
     * @param endtime Select date end (i.e. 2016-06-22T16:52:06.260Z). (optional)
     * @param loc Location (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2GetStationAsync(String net, String sta, String cha, OffsetDateTime starttime, OffsetDateTime endtime, String loc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2GetStationValidateBeforeCall(net, sta, cha, starttime, endtime, loc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2PostHyp2000
     * @param v2PostHyp2000Request JSON to post (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PostHyp2000Call(V2PostHyp2000Request v2PostHyp2000Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = v2PostHyp2000Request;

        // create path and map variables
        String localVarPath = "/location/v2/hyp2000";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2PostHyp2000ValidateBeforeCall(V2PostHyp2000Request v2PostHyp2000Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'v2PostHyp2000Request' is set
        if (v2PostHyp2000Request == null) {
            throw new ApiException("Missing the required parameter 'v2PostHyp2000Request' when calling v2PostHyp2000(Async)");
        }

        return v2PostHyp2000Call(v2PostHyp2000Request, _callback);

    }

    /**
     * Hypoinverse 2000 API
     *  # Introduction Hypoinverse is software used to Locate earthquakes and determine magnitudes in a local or regional seismic network.  More info, here: [https://www.usgs.gov/software/hypoinverse-earthquake-location](https://www.usgs.gov/software/hypoinverse-earthquake-location)  At INGV we build stand-alone Docker to deploy \&quot;hyp2000\&quot; ([https://github.com/ingv/hyp2000](https://github.com/ingv/hyp2000)) and on top of this docker was build a Web Service.  # Input The input file is a JSON with four sections:    - **HYP2000_CONF**: HYPOINVERS configuration file (refer to manual for more details)   - **MODEL**: Crustal velocity model   - **OUTPUT**: It could be &#x60;json&#x60;, &#x60;prt&#x60;, &#x60;arc&#x60;, &#x60;sum&#x60;   - **TYPE_HYP2000ARC**: An array of phases in **ew2openapi** format.  # Output The output could be &#x60;json&#x60;, &#x60;prt&#x60;, &#x60;arc&#x60; or &#x60;sum&#x60;:   - &#x60;prt&#x60;: print format   - &#x60;arc&#x60;: archive format   - &#x60;sum&#x60;: summary format   - &#x60;json&#x60;: NON STANDARD json format developed in **ew2openapi**
     * @param v2PostHyp2000Request JSON to post (required)
     * @return Hyp2000arcSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Hyp2000arcSchema v2PostHyp2000(V2PostHyp2000Request v2PostHyp2000Request) throws ApiException {
        ApiResponse<Hyp2000arcSchema> localVarResp = v2PostHyp2000WithHttpInfo(v2PostHyp2000Request);
        return localVarResp.getData();
    }

    /**
     * Hypoinverse 2000 API
     *  # Introduction Hypoinverse is software used to Locate earthquakes and determine magnitudes in a local or regional seismic network.  More info, here: [https://www.usgs.gov/software/hypoinverse-earthquake-location](https://www.usgs.gov/software/hypoinverse-earthquake-location)  At INGV we build stand-alone Docker to deploy \&quot;hyp2000\&quot; ([https://github.com/ingv/hyp2000](https://github.com/ingv/hyp2000)) and on top of this docker was build a Web Service.  # Input The input file is a JSON with four sections:    - **HYP2000_CONF**: HYPOINVERS configuration file (refer to manual for more details)   - **MODEL**: Crustal velocity model   - **OUTPUT**: It could be &#x60;json&#x60;, &#x60;prt&#x60;, &#x60;arc&#x60;, &#x60;sum&#x60;   - **TYPE_HYP2000ARC**: An array of phases in **ew2openapi** format.  # Output The output could be &#x60;json&#x60;, &#x60;prt&#x60;, &#x60;arc&#x60; or &#x60;sum&#x60;:   - &#x60;prt&#x60;: print format   - &#x60;arc&#x60;: archive format   - &#x60;sum&#x60;: summary format   - &#x60;json&#x60;: NON STANDARD json format developed in **ew2openapi**
     * @param v2PostHyp2000Request JSON to post (required)
     * @return ApiResponse&lt;Hyp2000arcSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hyp2000arcSchema> v2PostHyp2000WithHttpInfo(V2PostHyp2000Request v2PostHyp2000Request) throws ApiException {
        okhttp3.Call localVarCall = v2PostHyp2000ValidateBeforeCall(v2PostHyp2000Request, null);
        Type localVarReturnType = new TypeToken<Hyp2000arcSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Hypoinverse 2000 API (asynchronously)
     *  # Introduction Hypoinverse is software used to Locate earthquakes and determine magnitudes in a local or regional seismic network.  More info, here: [https://www.usgs.gov/software/hypoinverse-earthquake-location](https://www.usgs.gov/software/hypoinverse-earthquake-location)  At INGV we build stand-alone Docker to deploy \&quot;hyp2000\&quot; ([https://github.com/ingv/hyp2000](https://github.com/ingv/hyp2000)) and on top of this docker was build a Web Service.  # Input The input file is a JSON with four sections:    - **HYP2000_CONF**: HYPOINVERS configuration file (refer to manual for more details)   - **MODEL**: Crustal velocity model   - **OUTPUT**: It could be &#x60;json&#x60;, &#x60;prt&#x60;, &#x60;arc&#x60;, &#x60;sum&#x60;   - **TYPE_HYP2000ARC**: An array of phases in **ew2openapi** format.  # Output The output could be &#x60;json&#x60;, &#x60;prt&#x60;, &#x60;arc&#x60; or &#x60;sum&#x60;:   - &#x60;prt&#x60;: print format   - &#x60;arc&#x60;: archive format   - &#x60;sum&#x60;: summary format   - &#x60;json&#x60;: NON STANDARD json format developed in **ew2openapi**
     * @param v2PostHyp2000Request JSON to post (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PostHyp2000Async(V2PostHyp2000Request v2PostHyp2000Request, final ApiCallback<Hyp2000arcSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2PostHyp2000ValidateBeforeCall(v2PostHyp2000Request, _callback);
        Type localVarReturnType = new TypeToken<Hyp2000arcSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2PostPyML
     * @param v2PostPyMLRequest JSON to post (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PostPyMLCall(V2PostPyMLRequest v2PostPyMLRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = v2PostPyMLRequest;

        // create path and map variables
        String localVarPath = "/location/v2/pyml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2PostPyMLValidateBeforeCall(V2PostPyMLRequest v2PostPyMLRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'v2PostPyMLRequest' is set
        if (v2PostPyMLRequest == null) {
            throw new ApiException("Missing the required parameter 'v2PostPyMLRequest' when calling v2PostPyML(Async)");
        }

        return v2PostPyMLCall(v2PostPyMLRequest, _callback);

    }

    /**
     * PyML
     * To Do
     * @param v2PostPyMLRequest JSON to post (required)
     * @return V2PostPyML200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V2PostPyML200Response v2PostPyML(V2PostPyMLRequest v2PostPyMLRequest) throws ApiException {
        ApiResponse<V2PostPyML200Response> localVarResp = v2PostPyMLWithHttpInfo(v2PostPyMLRequest);
        return localVarResp.getData();
    }

    /**
     * PyML
     * To Do
     * @param v2PostPyMLRequest JSON to post (required)
     * @return ApiResponse&lt;V2PostPyML200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V2PostPyML200Response> v2PostPyMLWithHttpInfo(V2PostPyMLRequest v2PostPyMLRequest) throws ApiException {
        okhttp3.Call localVarCall = v2PostPyMLValidateBeforeCall(v2PostPyMLRequest, null);
        Type localVarReturnType = new TypeToken<V2PostPyML200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PyML (asynchronously)
     * To Do
     * @param v2PostPyMLRequest JSON to post (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Retry-After -  <br>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Retry-After -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  * Cache-Control -  <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PostPyMLAsync(V2PostPyMLRequest v2PostPyMLRequest, final ApiCallback<V2PostPyML200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2PostPyMLValidateBeforeCall(v2PostPyMLRequest, _callback);
        Type localVarReturnType = new TypeToken<V2PostPyML200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
