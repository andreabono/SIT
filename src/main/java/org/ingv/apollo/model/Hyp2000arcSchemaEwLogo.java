/*
 * Apollo Web Services
 *  # Rate limit:   The **Rate Limit** and **Rate Reset** are specified in the HTTP-header with `X-RateLimit-Limit` and `X-RateLimit-Reset`; the rate limit is *per* `IP`.
 *
 * The version of the OpenAPI document: 2.32.0
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.apollo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.apollo.JSON;

/**
 * Hyp2000arcSchemaEwLogo
 */
////////////@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-03T13:14:51.077355279Z[Etc/UTC]")
public class Hyp2000arcSchemaEwLogo {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private String module;

  public static final String SERIALIZED_NAME_INSTALLATION = "installation";
  @SerializedName(SERIALIZED_NAME_INSTALLATION)
  private String installation;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private String instance;

  public Hyp2000arcSchemaEwLogo() {
  }

  public Hyp2000arcSchemaEwLogo type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type description | ???
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Hyp2000arcSchemaEwLogo module(String module) {
    this.module = module;
    return this;
  }

   /**
   * Module description | ???
   * @return module
  **/
  @javax.annotation.Nonnull
  public String getModule() {
    return module;
  }

  public void setModule(String module) {
    this.module = module;
  }


  public Hyp2000arcSchemaEwLogo installation(String installation) {
    this.installation = installation;
    return this;
  }

   /**
   * Installation description | ???
   * @return installation
  **/
  @javax.annotation.Nonnull
  public String getInstallation() {
    return installation;
  }

  public void setInstallation(String installation) {
    this.installation = installation;
  }


  public Hyp2000arcSchemaEwLogo user(String user) {
    this.user = user;
    return this;
  }

   /**
   * User | ???
   * @return user
  **/
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public Hyp2000arcSchemaEwLogo hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * Hostname | ???
   * @return hostname
  **/
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Hyp2000arcSchemaEwLogo instance(String instance) {
    this.instance = instance;
    return this;
  }

   /**
   * Instance description | ???
   * @return instance
  **/
  @javax.annotation.Nonnull
  public String getInstance() {
    return instance;
  }

  public void setInstance(String instance) {
    this.instance = instance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hyp2000arcSchemaEwLogo hyp2000arcSchemaEwLogo = (Hyp2000arcSchemaEwLogo) o;
    return Objects.equals(this.type, hyp2000arcSchemaEwLogo.type) &&
        Objects.equals(this.module, hyp2000arcSchemaEwLogo.module) &&
        Objects.equals(this.installation, hyp2000arcSchemaEwLogo.installation) &&
        Objects.equals(this.user, hyp2000arcSchemaEwLogo.user) &&
        Objects.equals(this.hostname, hyp2000arcSchemaEwLogo.hostname) &&
        Objects.equals(this.instance, hyp2000arcSchemaEwLogo.instance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, module, installation, user, hostname, instance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hyp2000arcSchemaEwLogo {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    installation: ").append(toIndentedString(installation)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("module");
    openapiFields.add("installation");
    openapiFields.add("user");
    openapiFields.add("hostname");
    openapiFields.add("instance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("module");
    openapiRequiredFields.add("installation");
    openapiRequiredFields.add("instance");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Hyp2000arcSchemaEwLogo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hyp2000arcSchemaEwLogo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hyp2000arcSchemaEwLogo is not found in the empty JSON string", Hyp2000arcSchemaEwLogo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hyp2000arcSchemaEwLogo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hyp2000arcSchemaEwLogo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Hyp2000arcSchemaEwLogo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("module").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `module` to be a primitive type in the JSON string but got `%s`", jsonObj.get("module").toString()));
      }
      if (!jsonObj.get("installation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installation").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (!jsonObj.get("instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hyp2000arcSchemaEwLogo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hyp2000arcSchemaEwLogo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hyp2000arcSchemaEwLogo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hyp2000arcSchemaEwLogo.class));

       return (TypeAdapter<T>) new TypeAdapter<Hyp2000arcSchemaEwLogo>() {
           @Override
           public void write(JsonWriter out, Hyp2000arcSchemaEwLogo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hyp2000arcSchemaEwLogo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Hyp2000arcSchemaEwLogo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Hyp2000arcSchemaEwLogo
  * @throws IOException if the JSON string is invalid with respect to Hyp2000arcSchemaEwLogo
  */
  public static Hyp2000arcSchemaEwLogo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hyp2000arcSchemaEwLogo.class);
  }

 /**
  * Convert an instance of Hyp2000arcSchemaEwLogo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

