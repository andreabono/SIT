/*
 * Apollo Web Services
 *  # Rate limit:   The **Rate Limit** and **Rate Reset** are specified in the HTTP-header with `X-RateLimit-Limit` and `X-RateLimit-Reset`; the rate limit is *per* `IP`.
 *
 * The version of the OpenAPI document: 2.32.0
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.apollo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ingv.apollo.model.ObjectHyp2000Output;
import org.ingv.apollo.model.ObjectHyp2000Phase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.apollo.JSON;

/**
 * V2PostHyp2000RequestData
 */
////////////@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-03T13:14:51.077355279Z[Etc/UTC]")
public class V2PostHyp2000RequestData {
  public static final String SERIALIZED_NAME_HYP2000_CONF = "hyp2000_conf";
  @SerializedName(SERIALIZED_NAME_HYP2000_CONF)
  private List<String> hyp2000Conf;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private List<String> model;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private ObjectHyp2000Output output = ObjectHyp2000Output.PRT;

  public static final String SERIALIZED_NAME_PHASES = "phases";
  @SerializedName(SERIALIZED_NAME_PHASES)
  private List<ObjectHyp2000Phase> phases;

  public V2PostHyp2000RequestData() {
  }

  public V2PostHyp2000RequestData hyp2000Conf(List<String> hyp2000Conf) {
    this.hyp2000Conf = hyp2000Conf;
    return this;
  }

  public V2PostHyp2000RequestData addHyp2000ConfItem(String hyp2000ConfItem) {
    if (this.hyp2000Conf == null) {
      this.hyp2000Conf = new ArrayList<>();
    }
    this.hyp2000Conf.add(hyp2000ConfItem);
    return this;
  }

   /**
   * Get hyp2000Conf
   * @return hyp2000Conf
  **/
  @javax.annotation.Nullable
  public List<String> getHyp2000Conf() {
    return hyp2000Conf;
  }

  public void setHyp2000Conf(List<String> hyp2000Conf) {
    this.hyp2000Conf = hyp2000Conf;
  }


  public V2PostHyp2000RequestData model(List<String> model) {
    this.model = model;
    return this;
  }

  public V2PostHyp2000RequestData addModelItem(String modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  public List<String> getModel() {
    return model;
  }

  public void setModel(List<String> model) {
    this.model = model;
  }


  public V2PostHyp2000RequestData output(ObjectHyp2000Output output) {
    this.output = output;
    return this;
  }

   /**
   * Get output
   * @return output
  **/
  @javax.annotation.Nullable
  public ObjectHyp2000Output getOutput() {
    return output;
  }

  public void setOutput(ObjectHyp2000Output output) {
    this.output = output;
  }


  public V2PostHyp2000RequestData phases(List<ObjectHyp2000Phase> phases) {
    this.phases = phases;
    return this;
  }

  public V2PostHyp2000RequestData addPhasesItem(ObjectHyp2000Phase phasesItem) {
    if (this.phases == null) {
      this.phases = new ArrayList<>();
    }
    this.phases.add(phasesItem);
    return this;
  }

   /**
   * Get phases
   * @return phases
  **/
  @javax.annotation.Nullable
  public List<ObjectHyp2000Phase> getPhases() {
    return phases;
  }

  public void setPhases(List<ObjectHyp2000Phase> phases) {
    this.phases = phases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2PostHyp2000RequestData v2PostHyp2000RequestData = (V2PostHyp2000RequestData) o;
    return Objects.equals(this.hyp2000Conf, v2PostHyp2000RequestData.hyp2000Conf) &&
        Objects.equals(this.model, v2PostHyp2000RequestData.model) &&
        Objects.equals(this.output, v2PostHyp2000RequestData.output) &&
        Objects.equals(this.phases, v2PostHyp2000RequestData.phases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hyp2000Conf, model, output, phases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2PostHyp2000RequestData {\n");
    sb.append("    hyp2000Conf: ").append(toIndentedString(hyp2000Conf)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hyp2000_conf");
    openapiFields.add("model");
    openapiFields.add("output");
    openapiFields.add("phases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V2PostHyp2000RequestData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V2PostHyp2000RequestData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V2PostHyp2000RequestData is not found in the empty JSON string", V2PostHyp2000RequestData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V2PostHyp2000RequestData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V2PostHyp2000RequestData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("hyp2000_conf") != null && !jsonObj.get("hyp2000_conf").isJsonNull() && !jsonObj.get("hyp2000_conf").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyp2000_conf` to be an array in the JSON string but got `%s`", jsonObj.get("hyp2000_conf").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull() && !jsonObj.get("model").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be an array in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      // validate the optional field `output`
      if (jsonObj.get("output") != null && !jsonObj.get("output").isJsonNull()) {
        ObjectHyp2000Output.validateJsonElement(jsonObj.get("output"));
      }
      if (jsonObj.get("phases") != null && !jsonObj.get("phases").isJsonNull()) {
        JsonArray jsonArrayphases = jsonObj.getAsJsonArray("phases");
        if (jsonArrayphases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phases` to be an array in the JSON string but got `%s`", jsonObj.get("phases").toString()));
          }

          // validate the optional field `phases` (array)
          for (int i = 0; i < jsonArrayphases.size(); i++) {
            ObjectHyp2000Phase.validateJsonElement(jsonArrayphases.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V2PostHyp2000RequestData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V2PostHyp2000RequestData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V2PostHyp2000RequestData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V2PostHyp2000RequestData.class));

       return (TypeAdapter<T>) new TypeAdapter<V2PostHyp2000RequestData>() {
           @Override
           public void write(JsonWriter out, V2PostHyp2000RequestData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V2PostHyp2000RequestData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V2PostHyp2000RequestData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V2PostHyp2000RequestData
  * @throws IOException if the JSON string is invalid with respect to V2PostHyp2000RequestData
  */
  public static V2PostHyp2000RequestData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V2PostHyp2000RequestData.class);
  }

 /**
  * Convert an instance of V2PostHyp2000RequestData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

