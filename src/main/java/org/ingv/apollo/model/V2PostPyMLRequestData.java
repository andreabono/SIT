/*
 * Apollo Web Services
 *  # Rate limit:   The **Rate Limit** and **Rate Reset** are specified in the HTTP-header with `X-RateLimit-Limit` and `X-RateLimit-Reset`; the rate limit is *per* `IP`.
 *
 * The version of the OpenAPI document: 2.32.0
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.apollo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ingv.apollo.model.ObjectOrigin;
import org.ingv.apollo.model.ObjectPyMLAmplitude;
import org.ingv.apollo.model.ObjectPyMLConf;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.apollo.JSON;

/**
 * V2PostPyMLRequestData
 */
////////////@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-03T13:14:51.077355279Z[Etc/UTC]")
public class V2PostPyMLRequestData {
  public static final String SERIALIZED_NAME_PYML_CONF = "pyml_conf";
  @SerializedName(SERIALIZED_NAME_PYML_CONF)
  private ObjectPyMLConf pymlConf;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private ObjectOrigin origin;

  public static final String SERIALIZED_NAME_AMPLITUDES = "amplitudes";
  @SerializedName(SERIALIZED_NAME_AMPLITUDES)
  private List<ObjectPyMLAmplitude> amplitudes;

  public V2PostPyMLRequestData() {
  }

  public V2PostPyMLRequestData pymlConf(ObjectPyMLConf pymlConf) {
    this.pymlConf = pymlConf;
    return this;
  }

   /**
   * Get pymlConf
   * @return pymlConf
  **/
  @javax.annotation.Nullable
  public ObjectPyMLConf getPymlConf() {
    return pymlConf;
  }

  public void setPymlConf(ObjectPyMLConf pymlConf) {
    this.pymlConf = pymlConf;
  }


  public V2PostPyMLRequestData origin(ObjectOrigin origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nullable
  public ObjectOrigin getOrigin() {
    return origin;
  }

  public void setOrigin(ObjectOrigin origin) {
    this.origin = origin;
  }


  public V2PostPyMLRequestData amplitudes(List<ObjectPyMLAmplitude> amplitudes) {
    this.amplitudes = amplitudes;
    return this;
  }

  public V2PostPyMLRequestData addAmplitudesItem(ObjectPyMLAmplitude amplitudesItem) {
    if (this.amplitudes == null) {
      this.amplitudes = new ArrayList<>();
    }
    this.amplitudes.add(amplitudesItem);
    return this;
  }

   /**
   * Get amplitudes
   * @return amplitudes
  **/
  @javax.annotation.Nullable
  public List<ObjectPyMLAmplitude> getAmplitudes() {
    return amplitudes;
  }

  public void setAmplitudes(List<ObjectPyMLAmplitude> amplitudes) {
    this.amplitudes = amplitudes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2PostPyMLRequestData v2PostPyMLRequestData = (V2PostPyMLRequestData) o;
    return Objects.equals(this.pymlConf, v2PostPyMLRequestData.pymlConf) &&
        Objects.equals(this.origin, v2PostPyMLRequestData.origin) &&
        Objects.equals(this.amplitudes, v2PostPyMLRequestData.amplitudes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pymlConf, origin, amplitudes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2PostPyMLRequestData {\n");
    sb.append("    pymlConf: ").append(toIndentedString(pymlConf)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    amplitudes: ").append(toIndentedString(amplitudes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pyml_conf");
    openapiFields.add("origin");
    openapiFields.add("amplitudes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V2PostPyMLRequestData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V2PostPyMLRequestData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V2PostPyMLRequestData is not found in the empty JSON string", V2PostPyMLRequestData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V2PostPyMLRequestData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V2PostPyMLRequestData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `pyml_conf`
      if (jsonObj.get("pyml_conf") != null && !jsonObj.get("pyml_conf").isJsonNull()) {
        ObjectPyMLConf.validateJsonElement(jsonObj.get("pyml_conf"));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        ObjectOrigin.validateJsonElement(jsonObj.get("origin"));
      }
      if (jsonObj.get("amplitudes") != null && !jsonObj.get("amplitudes").isJsonNull()) {
        JsonArray jsonArrayamplitudes = jsonObj.getAsJsonArray("amplitudes");
        if (jsonArrayamplitudes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("amplitudes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `amplitudes` to be an array in the JSON string but got `%s`", jsonObj.get("amplitudes").toString()));
          }

          // validate the optional field `amplitudes` (array)
          for (int i = 0; i < jsonArrayamplitudes.size(); i++) {
            ObjectPyMLAmplitude.validateJsonElement(jsonArrayamplitudes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V2PostPyMLRequestData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V2PostPyMLRequestData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V2PostPyMLRequestData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V2PostPyMLRequestData.class));

       return (TypeAdapter<T>) new TypeAdapter<V2PostPyMLRequestData>() {
           @Override
           public void write(JsonWriter out, V2PostPyMLRequestData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V2PostPyMLRequestData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V2PostPyMLRequestData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V2PostPyMLRequestData
  * @throws IOException if the JSON string is invalid with respect to V2PostPyMLRequestData
  */
  public static V2PostPyMLRequestData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V2PostPyMLRequestData.class);
  }

 /**
  * Convert an instance of V2PostPyMLRequestData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

