/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * MagnitudePhasesInner
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class MagnitudePhasesInner {
  public static final String SERIALIZED_NAME_NET = "net";
  @SerializedName(SERIALIZED_NAME_NET)
  private String net;

  public static final String SERIALIZED_NAME_STA = "sta";
  @SerializedName(SERIALIZED_NAME_STA)
  private String sta;

  public static final String SERIALIZED_NAME_COMP = "comp";
  @SerializedName(SERIALIZED_NAME_COMP)
  private String comp;

  public static final String SERIALIZED_NAME_LOC = "loc";
  @SerializedName(SERIALIZED_NAME_LOC)
  private String loc = "--";

  public static final String SERIALIZED_NAME_MAG = "mag";
  @SerializedName(SERIALIZED_NAME_MAG)
  private Double mag;

  public static final String SERIALIZED_NAME_DIST = "dist";
  @SerializedName(SERIALIZED_NAME_DIST)
  private Float dist;

  public static final String SERIALIZED_NAME_CORR = "corr";
  @SerializedName(SERIALIZED_NAME_CORR)
  private Double corr;

  public static final String SERIALIZED_NAME_TIME1 = "time1";
  @SerializedName(SERIALIZED_NAME_TIME1)
  private OffsetDateTime time1;

  public static final String SERIALIZED_NAME_AMP1 = "amp1";
  @SerializedName(SERIALIZED_NAME_AMP1)
  private Double amp1;

  public static final String SERIALIZED_NAME_PERIOD1 = "period1";
  @SerializedName(SERIALIZED_NAME_PERIOD1)
  private Double period1;

  public static final String SERIALIZED_NAME_TIME2 = "time2";
  @SerializedName(SERIALIZED_NAME_TIME2)
  private OffsetDateTime time2;

  public static final String SERIALIZED_NAME_AMP2 = "amp2";
  @SerializedName(SERIALIZED_NAME_AMP2)
  private Double amp2;

  public static final String SERIALIZED_NAME_PERIOD2 = "period2";
  @SerializedName(SERIALIZED_NAME_PERIOD2)
  private Double period2;

  public MagnitudePhasesInner() {
  }

  public MagnitudePhasesInner net(String net) {
    this.net = net;
    return this;
  }

   /**
   * Channel net code | char(2)
   * @return net
  **/
  @javax.annotation.Nonnull
  public String getNet() {
    return net;
  }

  public void setNet(String net) {
    this.net = net;
  }


  public MagnitudePhasesInner sta(String sta) {
    this.sta = sta;
    return this;
  }

   /**
   * Channel station code | varchar(5)
   * @return sta
  **/
  @javax.annotation.Nonnull
  public String getSta() {
    return sta;
  }

  public void setSta(String sta) {
    this.sta = sta;
  }


  public MagnitudePhasesInner comp(String comp) {
    this.comp = comp;
    return this;
  }

   /**
   * Channel code | char(3)
   * @return comp
  **/
  @javax.annotation.Nonnull
  public String getComp() {
    return comp;
  }

  public void setComp(String comp) {
    this.comp = comp;
  }


  public MagnitudePhasesInner loc(String loc) {
    this.loc = loc;
    return this;
  }

   /**
   * Channel location | char(2)
   * @return loc
  **/
  @javax.annotation.Nonnull
  public String getLoc() {
    return loc;
  }

  public void setLoc(String loc) {
    this.loc = loc;
  }


  public MagnitudePhasesInner mag(Double mag) {
    this.mag = mag;
    return this;
  }

   /**
   * Amplitude magnitude value | double
   * @return mag
  **/
  @javax.annotation.Nullable
  public Double getMag() {
    return mag;
  }

  public void setMag(Double mag) {
    this.mag = mag;
  }


  public MagnitudePhasesInner dist(Float dist) {
    this.dist = dist;
    return this;
  }

   /**
   * Distance from epicenter of the station expressed in Km | double
   * @return dist
  **/
  @javax.annotation.Nullable
  public Float getDist() {
    return dist;
  }

  public void setDist(Float dist) {
    this.dist = dist;
  }


  public MagnitudePhasesInner corr(Double corr) {
    this.corr = corr;
    return this;
  }

   /**
   * magnitude correction | double
   * @return corr
  **/
  @javax.annotation.Nullable
  public Double getCorr() {
    return corr;
  }

  public void setCorr(Double corr) {
    this.corr = corr;
  }


  public MagnitudePhasesInner time1(OffsetDateTime time1) {
    this.time1 = time1;
    return this;
  }

   /**
   *  | datetime(3)
   * @return time1
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getTime1() {
    return time1;
  }

  public void setTime1(OffsetDateTime time1) {
    this.time1 = time1;
  }


  public MagnitudePhasesInner amp1(Double amp1) {
    this.amp1 = amp1;
    return this;
  }

   /**
   * Amplitude value | double
   * @return amp1
  **/
  @javax.annotation.Nonnull
  public Double getAmp1() {
    return amp1;
  }

  public void setAmp1(Double amp1) {
    this.amp1 = amp1;
  }


  public MagnitudePhasesInner period1(Double period1) {
    this.period1 = period1;
    return this;
  }

   /**
   * Amlitude period | double
   * @return period1
  **/
  @javax.annotation.Nullable
  public Double getPeriod1() {
    return period1;
  }

  public void setPeriod1(Double period1) {
    this.period1 = period1;
  }


  public MagnitudePhasesInner time2(OffsetDateTime time2) {
    this.time2 = time2;
    return this;
  }

   /**
   *  | datetime(3)
   * @return time2
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getTime2() {
    return time2;
  }

  public void setTime2(OffsetDateTime time2) {
    this.time2 = time2;
  }


  public MagnitudePhasesInner amp2(Double amp2) {
    this.amp2 = amp2;
    return this;
  }

   /**
   * Amplitude value | double
   * @return amp2
  **/
  @javax.annotation.Nonnull
  public Double getAmp2() {
    return amp2;
  }

  public void setAmp2(Double amp2) {
    this.amp2 = amp2;
  }


  public MagnitudePhasesInner period2(Double period2) {
    this.period2 = period2;
    return this;
  }

   /**
   * Amlitude period | double
   * @return period2
  **/
  @javax.annotation.Nullable
  public Double getPeriod2() {
    return period2;
  }

  public void setPeriod2(Double period2) {
    this.period2 = period2;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MagnitudePhasesInner instance itself
   */
  public MagnitudePhasesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagnitudePhasesInner magnitudePhasesInner = (MagnitudePhasesInner) o;
    return Objects.equals(this.net, magnitudePhasesInner.net) &&
        Objects.equals(this.sta, magnitudePhasesInner.sta) &&
        Objects.equals(this.comp, magnitudePhasesInner.comp) &&
        Objects.equals(this.loc, magnitudePhasesInner.loc) &&
        Objects.equals(this.mag, magnitudePhasesInner.mag) &&
        Objects.equals(this.dist, magnitudePhasesInner.dist) &&
        Objects.equals(this.corr, magnitudePhasesInner.corr) &&
        Objects.equals(this.time1, magnitudePhasesInner.time1) &&
        Objects.equals(this.amp1, magnitudePhasesInner.amp1) &&
        Objects.equals(this.period1, magnitudePhasesInner.period1) &&
        Objects.equals(this.time2, magnitudePhasesInner.time2) &&
        Objects.equals(this.amp2, magnitudePhasesInner.amp2) &&
        Objects.equals(this.period2, magnitudePhasesInner.period2)&&
        Objects.equals(this.additionalProperties, magnitudePhasesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(net, sta, comp, loc, mag, dist, corr, time1, amp1, period1, time2, amp2, period2, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagnitudePhasesInner {\n");
    sb.append("    net: ").append(toIndentedString(net)).append("\n");
    sb.append("    sta: ").append(toIndentedString(sta)).append("\n");
    sb.append("    comp: ").append(toIndentedString(comp)).append("\n");
    sb.append("    loc: ").append(toIndentedString(loc)).append("\n");
    sb.append("    mag: ").append(toIndentedString(mag)).append("\n");
    sb.append("    dist: ").append(toIndentedString(dist)).append("\n");
    sb.append("    corr: ").append(toIndentedString(corr)).append("\n");
    sb.append("    time1: ").append(toIndentedString(time1)).append("\n");
    sb.append("    amp1: ").append(toIndentedString(amp1)).append("\n");
    sb.append("    period1: ").append(toIndentedString(period1)).append("\n");
    sb.append("    time2: ").append(toIndentedString(time2)).append("\n");
    sb.append("    amp2: ").append(toIndentedString(amp2)).append("\n");
    sb.append("    period2: ").append(toIndentedString(period2)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("net");
    openapiFields.add("sta");
    openapiFields.add("comp");
    openapiFields.add("loc");
    openapiFields.add("mag");
    openapiFields.add("dist");
    openapiFields.add("corr");
    openapiFields.add("time1");
    openapiFields.add("amp1");
    openapiFields.add("period1");
    openapiFields.add("time2");
    openapiFields.add("amp2");
    openapiFields.add("period2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("net");
    openapiRequiredFields.add("sta");
    openapiRequiredFields.add("comp");
    openapiRequiredFields.add("loc");
    openapiRequiredFields.add("time1");
    openapiRequiredFields.add("amp1");
    openapiRequiredFields.add("time2");
    openapiRequiredFields.add("amp2");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagnitudePhasesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagnitudePhasesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagnitudePhasesInner is not found in the empty JSON string", MagnitudePhasesInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MagnitudePhasesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("net").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net").toString()));
      }
      if (!jsonObj.get("sta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sta").toString()));
      }
      if (!jsonObj.get("comp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comp").toString()));
      }
      if (!jsonObj.get("loc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagnitudePhasesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagnitudePhasesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagnitudePhasesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagnitudePhasesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MagnitudePhasesInner>() {
           @Override
           public void write(JsonWriter out, MagnitudePhasesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MagnitudePhasesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             MagnitudePhasesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagnitudePhasesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagnitudePhasesInner
  * @throws IOException if the JSON string is invalid with respect to MagnitudePhasesInner
  */
  public static MagnitudePhasesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagnitudePhasesInner.class);
  }

 /**
  * Convert an instance of MagnitudePhasesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

