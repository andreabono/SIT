/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ingv.dante.model.MagnitudePhasesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * MagnitudeSchemaEwMessage
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class MagnitudeSchemaEwMessage {
  public static final String SERIALIZED_NAME_QUAKE_ID = "quakeId";
  @SerializedName(SERIALIZED_NAME_QUAKE_ID)
  private Long quakeId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_MAG = "mag";
  @SerializedName(SERIALIZED_NAME_MAG)
  private Double mag;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Double error;

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private Double quality;

  public static final String SERIALIZED_NAME_MIN_DIST = "minDist";
  @SerializedName(SERIALIZED_NAME_MIN_DIST)
  private Double minDist;

  public static final String SERIALIZED_NAME_AZIMUTH = "azimuth";
  @SerializedName(SERIALIZED_NAME_AZIMUTH)
  private Float azimuth;

  public static final String SERIALIZED_NAME_N_STATIONS = "nStations";
  @SerializedName(SERIALIZED_NAME_N_STATIONS)
  private Long nStations;

  public static final String SERIALIZED_NAME_N_CHANNELS = "nChannels";
  @SerializedName(SERIALIZED_NAME_N_CHANNELS)
  private Long nChannels;

  public static final String SERIALIZED_NAME_Q_AUTHOR = "qAuthor";
  @SerializedName(SERIALIZED_NAME_Q_AUTHOR)
  private String qAuthor;

  public static final String SERIALIZED_NAME_QDDS_VERSION = "qddsVersion";
  @SerializedName(SERIALIZED_NAME_QDDS_VERSION)
  private Double qddsVersion;

  public static final String SERIALIZED_NAME_I_MAG_TYPE = "iMagType";
  @SerializedName(SERIALIZED_NAME_I_MAG_TYPE)
  private Double iMagType;

  public static final String SERIALIZED_NAME_MAG_TYPE = "magType";
  @SerializedName(SERIALIZED_NAME_MAG_TYPE)
  private String magType;

  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private Double algorithm;

  public static final String SERIALIZED_NAME_INGV_QUALITY = "ingvQuality";
  @SerializedName(SERIALIZED_NAME_INGV_QUALITY)
  private String ingvQuality;

  public static final String SERIALIZED_NAME_PHASES = "phases";
  @SerializedName(SERIALIZED_NAME_PHASES)
  private List<MagnitudePhasesInner> phases;

  public MagnitudeSchemaEwMessage() {
  }

  public MagnitudeSchemaEwMessage quakeId(Long quakeId) {
    this.quakeId = quakeId;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return quakeId
  **/
  @javax.annotation.Nullable
  public Long getQuakeId() {
    return quakeId;
  }

  public void setQuakeId(Long quakeId) {
    this.quakeId = quakeId;
  }


  public MagnitudeSchemaEwMessage version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Localization name (es:ew prelim,XX,WW,..) | varchar(255)
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public MagnitudeSchemaEwMessage mag(Double mag) {
    this.mag = mag;
    return this;
  }

   /**
   * Magnitude value | double
   * @return mag
  **/
  @javax.annotation.Nonnull
  public Double getMag() {
    return mag;
  }

  public void setMag(Double mag) {
    this.mag = mag;
  }


  public MagnitudeSchemaEwMessage error(Double error) {
    this.error = error;
    return this;
  }

   /**
   * Magnitude error | double
   * @return error
  **/
  @javax.annotation.Nullable
  public Double getError() {
    return error;
  }

  public void setError(Double error) {
    this.error = error;
  }


  public MagnitudeSchemaEwMessage quality(Double quality) {
    this.quality = quality;
    return this;
  }

   /**
   * quality | double
   * @return quality
  **/
  @javax.annotation.Nullable
  public Double getQuality() {
    return quality;
  }

  public void setQuality(Double quality) {
    this.quality = quality;
  }


  public MagnitudeSchemaEwMessage minDist(Double minDist) {
    this.minDist = minDist;
    return this;
  }

   /**
   * Minimal distance from station to origin | double
   * @return minDist
  **/
  @javax.annotation.Nullable
  public Double getMinDist() {
    return minDist;
  }

  public void setMinDist(Double minDist) {
    this.minDist = minDist;
  }


  public MagnitudeSchemaEwMessage azimuth(Float azimuth) {
    this.azimuth = azimuth;
    return this;
  }

   /**
   * Azimutal gap | float4
   * @return azimuth
  **/
  @javax.annotation.Nullable
  public Float getAzimuth() {
    return azimuth;
  }

  public void setAzimuth(Float azimuth) {
    this.azimuth = azimuth;
  }


  public MagnitudeSchemaEwMessage nStations(Long nStations) {
    this.nStations = nStations;
    return this;
  }

   /**
   * Number of the stations on magnitudo calculation | int(11)
   * @return nStations
  **/
  @javax.annotation.Nullable
  public Long getnStations() {
    return nStations;
  }

  public void setnStations(Long nStations) {
    this.nStations = nStations;
  }


  public MagnitudeSchemaEwMessage nChannels(Long nChannels) {
    this.nChannels = nChannels;
    return this;
  }

   /**
   * Number of the channel on magnitudo calculation | int(11)
   * @return nChannels
  **/
  @javax.annotation.Nullable
  public Long getnChannels() {
    return nChannels;
  }

  public void setnChannels(Long nChannels) {
    this.nChannels = nChannels;
  }


  public MagnitudeSchemaEwMessage qAuthor(String qAuthor) {
    this.qAuthor = qAuthor;
    return this;
  }

   /**
   * qAuthor description
   * @return qAuthor
  **/
  @javax.annotation.Nullable
  public String getqAuthor() {
    return qAuthor;
  }

  public void setqAuthor(String qAuthor) {
    this.qAuthor = qAuthor;
  }


  public MagnitudeSchemaEwMessage qddsVersion(Double qddsVersion) {
    this.qddsVersion = qddsVersion;
    return this;
  }

   /**
   * qddsVersion description
   * @return qddsVersion
  **/
  @javax.annotation.Nullable
  public Double getQddsVersion() {
    return qddsVersion;
  }

  public void setQddsVersion(Double qddsVersion) {
    this.qddsVersion = qddsVersion;
  }


  public MagnitudeSchemaEwMessage iMagType(Double iMagType) {
    this.iMagType = iMagType;
    return this;
  }

   /**
   * iMagType description
   * @return iMagType
  **/
  @javax.annotation.Nullable
  public Double getiMagType() {
    return iMagType;
  }

  public void setiMagType(Double iMagType) {
    this.iMagType = iMagType;
  }


  public MagnitudeSchemaEwMessage magType(String magType) {
    this.magType = magType;
    return this;
  }

   /**
   * Type of the magnitude | varchar(255)
   * @return magType
  **/
  @javax.annotation.Nullable
  public String getMagType() {
    return magType;
  }

  public void setMagType(String magType) {
    this.magType = magType;
  }


  public MagnitudeSchemaEwMessage algorithm(Double algorithm) {
    this.algorithm = algorithm;
    return this;
  }

   /**
   * algorithm description
   * @return algorithm
  **/
  @javax.annotation.Nullable
  public Double getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(Double algorithm) {
    this.algorithm = algorithm;
  }


  public MagnitudeSchemaEwMessage ingvQuality(String ingvQuality) {
    this.ingvQuality = ingvQuality;
    return this;
  }

   /**
   * INGV quality code of the magnitude (computed by ew2moledb) | char(2)
   * @return ingvQuality
  **/
  @javax.annotation.Nullable
  public String getIngvQuality() {
    return ingvQuality;
  }

  public void setIngvQuality(String ingvQuality) {
    this.ingvQuality = ingvQuality;
  }


  public MagnitudeSchemaEwMessage phases(List<MagnitudePhasesInner> phases) {
    this.phases = phases;
    return this;
  }

  public MagnitudeSchemaEwMessage addPhasesItem(MagnitudePhasesInner phasesItem) {
    if (this.phases == null) {
      this.phases = new ArrayList<>();
    }
    this.phases.add(phasesItem);
    return this;
  }

   /**
   * Get phases
   * @return phases
  **/
  @javax.annotation.Nullable
  public List<MagnitudePhasesInner> getPhases() {
    return phases;
  }

  public void setPhases(List<MagnitudePhasesInner> phases) {
    this.phases = phases;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MagnitudeSchemaEwMessage instance itself
   */
  public MagnitudeSchemaEwMessage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagnitudeSchemaEwMessage magnitudeSchemaEwMessage = (MagnitudeSchemaEwMessage) o;
    return Objects.equals(this.quakeId, magnitudeSchemaEwMessage.quakeId) &&
        Objects.equals(this.version, magnitudeSchemaEwMessage.version) &&
        Objects.equals(this.mag, magnitudeSchemaEwMessage.mag) &&
        Objects.equals(this.error, magnitudeSchemaEwMessage.error) &&
        Objects.equals(this.quality, magnitudeSchemaEwMessage.quality) &&
        Objects.equals(this.minDist, magnitudeSchemaEwMessage.minDist) &&
        Objects.equals(this.azimuth, magnitudeSchemaEwMessage.azimuth) &&
        Objects.equals(this.nStations, magnitudeSchemaEwMessage.nStations) &&
        Objects.equals(this.nChannels, magnitudeSchemaEwMessage.nChannels) &&
        Objects.equals(this.qAuthor, magnitudeSchemaEwMessage.qAuthor) &&
        Objects.equals(this.qddsVersion, magnitudeSchemaEwMessage.qddsVersion) &&
        Objects.equals(this.iMagType, magnitudeSchemaEwMessage.iMagType) &&
        Objects.equals(this.magType, magnitudeSchemaEwMessage.magType) &&
        Objects.equals(this.algorithm, magnitudeSchemaEwMessage.algorithm) &&
        Objects.equals(this.ingvQuality, magnitudeSchemaEwMessage.ingvQuality) &&
        Objects.equals(this.phases, magnitudeSchemaEwMessage.phases)&&
        Objects.equals(this.additionalProperties, magnitudeSchemaEwMessage.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quakeId, version, mag, error, quality, minDist, azimuth, nStations, nChannels, qAuthor, qddsVersion, iMagType, magType, algorithm, ingvQuality, phases, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagnitudeSchemaEwMessage {\n");
    sb.append("    quakeId: ").append(toIndentedString(quakeId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    mag: ").append(toIndentedString(mag)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    minDist: ").append(toIndentedString(minDist)).append("\n");
    sb.append("    azimuth: ").append(toIndentedString(azimuth)).append("\n");
    sb.append("    nStations: ").append(toIndentedString(nStations)).append("\n");
    sb.append("    nChannels: ").append(toIndentedString(nChannels)).append("\n");
    sb.append("    qAuthor: ").append(toIndentedString(qAuthor)).append("\n");
    sb.append("    qddsVersion: ").append(toIndentedString(qddsVersion)).append("\n");
    sb.append("    iMagType: ").append(toIndentedString(iMagType)).append("\n");
    sb.append("    magType: ").append(toIndentedString(magType)).append("\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    ingvQuality: ").append(toIndentedString(ingvQuality)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quakeId");
    openapiFields.add("version");
    openapiFields.add("mag");
    openapiFields.add("error");
    openapiFields.add("quality");
    openapiFields.add("minDist");
    openapiFields.add("azimuth");
    openapiFields.add("nStations");
    openapiFields.add("nChannels");
    openapiFields.add("qAuthor");
    openapiFields.add("qddsVersion");
    openapiFields.add("iMagType");
    openapiFields.add("magType");
    openapiFields.add("algorithm");
    openapiFields.add("ingvQuality");
    openapiFields.add("phases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("quakeId");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("mag");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagnitudeSchemaEwMessage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagnitudeSchemaEwMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagnitudeSchemaEwMessage is not found in the empty JSON string", MagnitudeSchemaEwMessage.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MagnitudeSchemaEwMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("qAuthor") != null && !jsonObj.get("qAuthor").isJsonNull()) && !jsonObj.get("qAuthor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qAuthor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qAuthor").toString()));
      }
      if ((jsonObj.get("magType") != null && !jsonObj.get("magType").isJsonNull()) && !jsonObj.get("magType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `magType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("magType").toString()));
      }
      if ((jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) && !jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
      if ((jsonObj.get("ingvQuality") != null && !jsonObj.get("ingvQuality").isJsonNull()) && !jsonObj.get("ingvQuality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingvQuality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingvQuality").toString()));
      }
      if (jsonObj.get("phases") != null && !jsonObj.get("phases").isJsonNull()) {
        JsonArray jsonArrayphases = jsonObj.getAsJsonArray("phases");
        if (jsonArrayphases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phases` to be an array in the JSON string but got `%s`", jsonObj.get("phases").toString()));
          }

          // validate the optional field `phases` (array)
          for (int i = 0; i < jsonArrayphases.size(); i++) {
            MagnitudePhasesInner.validateJsonElement(jsonArrayphases.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagnitudeSchemaEwMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagnitudeSchemaEwMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagnitudeSchemaEwMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagnitudeSchemaEwMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<MagnitudeSchemaEwMessage>() {
           @Override
           public void write(JsonWriter out, MagnitudeSchemaEwMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MagnitudeSchemaEwMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             MagnitudeSchemaEwMessage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagnitudeSchemaEwMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagnitudeSchemaEwMessage
  * @throws IOException if the JSON string is invalid with respect to MagnitudeSchemaEwMessage
  */
  public static MagnitudeSchemaEwMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagnitudeSchemaEwMessage.class);
  }

 /**
  * Convert an instance of MagnitudeSchemaEwMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

