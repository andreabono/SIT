/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectOrigin;
import org.ingv.dante.model.ObjectProvenance;
import org.ingv.dante.model.ObjectStrongmotion;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectEvent
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class ObjectEvent {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_ID_LOCALSPACE = "id_localspace";
  @SerializedName(SERIALIZED_NAME_ID_LOCALSPACE)
  private Long idLocalspace;

  public static final String SERIALIZED_NAME_TYPE_EVENT = "type_event";
  @SerializedName(SERIALIZED_NAME_TYPE_EVENT)
  private String typeEvent;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private String flags;

  public static final String SERIALIZED_NAME_EVENT_GROUP_ID = "event_group_id";
  @SerializedName(SERIALIZED_NAME_EVENT_GROUP_ID)
  private Long eventGroupId = 0l;

  public static final String SERIALIZED_NAME_PREFERRED_ORIGIN_ID = "preferred_origin_id";
  @SerializedName(SERIALIZED_NAME_PREFERRED_ORIGIN_ID)
  private Long preferredOriginId;

  public static final String SERIALIZED_NAME_PREFERRED_MAGNITUDE_ID = "preferred_magnitude_id";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAGNITUDE_ID)
  private Long preferredMagnitudeId;

  public static final String SERIALIZED_NAME_PREFERRED_FOCALMECHANISM_ID = "preferred_focalmechanism_id";
  @SerializedName(SERIALIZED_NAME_PREFERRED_FOCALMECHANISM_ID)
  private Long preferredFocalmechanismId;

  public static final String SERIALIZED_NAME_SET_PREFERRED_ORIGIN_ID_LOCALSPACE = "set_preferred_origin_id_localspace";
  @SerializedName(SERIALIZED_NAME_SET_PREFERRED_ORIGIN_ID_LOCALSPACE)
  private Long setPreferredOriginIdLocalspace;

  public static final String SERIALIZED_NAME_SET_PREFERRED_MAGNITUDE_ID_LOCALSPACE = "set_preferred_magnitude_id_localspace";
  @SerializedName(SERIALIZED_NAME_SET_PREFERRED_MAGNITUDE_ID_LOCALSPACE)
  private Long setPreferredMagnitudeIdLocalspace;

  public static final String SERIALIZED_NAME_TYPE_GROUP = "type_group";
  @SerializedName(SERIALIZED_NAME_TYPE_GROUP)
  private Long typeGroup = 0l;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ObjectProvenance provenance;

  public static final String SERIALIZED_NAME_LOCALSPACE = "localspace";
  @SerializedName(SERIALIZED_NAME_LOCALSPACE)
  private ObjectLocalspace localspace;

  public static final String SERIALIZED_NAME_ORIGINS = "origins";
  @SerializedName(SERIALIZED_NAME_ORIGINS)
  private List<ObjectOrigin> origins;

  public static final String SERIALIZED_NAME_STRONGMOTIONS = "strongmotions";
  @SerializedName(SERIALIZED_NAME_STRONGMOTIONS)
  private List<ObjectStrongmotion> strongmotions;

  public ObjectEvent() {
  }

  public ObjectEvent(
     Long id, 
     OffsetDateTime modified, 
     OffsetDateTime inserted, 
     String flags, 
     Long eventGroupId, 
     Long preferredOriginId, 
     Long preferredMagnitudeId, 
     Long preferredFocalmechanismId, 
     Long typeGroup
  ) {
    this();
    this.id = id;
    this.modified = modified;
    this.inserted = inserted;
    this.flags = flags;
    this.eventGroupId = eventGroupId;
    this.preferredOriginId = preferredOriginId;
    this.preferredMagnitudeId = preferredMagnitudeId;
    this.preferredFocalmechanismId = preferredFocalmechanismId;
    this.typeGroup = typeGroup;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }



   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInserted() {
    return inserted;
  }



  public ObjectEvent idLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return idLocalspace
  **/
  @javax.annotation.Nullable
  public Long getIdLocalspace() {
    return idLocalspace;
  }

  public void setIdLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
  }


  public ObjectEvent typeEvent(String typeEvent) {
    this.typeEvent = typeEvent;
    return this;
  }

   /**
   * Name | varchar(255)
   * @return typeEvent
  **/
  @javax.annotation.Nonnull
  public String getTypeEvent() {
    return typeEvent;
  }

  public void setTypeEvent(String typeEvent) {
    this.typeEvent = typeEvent;
  }


   /**
   * Flags for origin | varchar(255)
   * @return flags
  **/
  @javax.annotation.Nullable
  public String getFlags() {
    return flags;
  }



   /**
   * Link event group | bigint(20)
   * @return eventGroupId
  **/
  @javax.annotation.Nullable
  public Long getEventGroupId() {
    return eventGroupId;
  }



   /**
   * Link: preferred origin. It can be NULL. | bigint(20)
   * @return preferredOriginId
  **/
  @javax.annotation.Nullable
  public Long getPreferredOriginId() {
    return preferredOriginId;
  }



   /**
   * Link: preferred magnitude. It can be NULL. | bigint(20)
   * @return preferredMagnitudeId
  **/
  @javax.annotation.Nullable
  public Long getPreferredMagnitudeId() {
    return preferredMagnitudeId;
  }



   /**
   * Link: preferred focalmechanism. It can be NULL. | bigint(20)
   * @return preferredFocalmechanismId
  **/
  @javax.annotation.Nullable
  public Long getPreferredFocalmechanismId() {
    return preferredFocalmechanismId;
  }



  public ObjectEvent setPreferredOriginIdLocalspace(Long setPreferredOriginIdLocalspace) {
    this.setPreferredOriginIdLocalspace = setPreferredOriginIdLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return setPreferredOriginIdLocalspace
  **/
  @javax.annotation.Nullable
  public Long getSetPreferredOriginIdLocalspace() {
    return setPreferredOriginIdLocalspace;
  }

  public void setSetPreferredOriginIdLocalspace(Long setPreferredOriginIdLocalspace) {
    this.setPreferredOriginIdLocalspace = setPreferredOriginIdLocalspace;
  }


  public ObjectEvent setPreferredMagnitudeIdLocalspace(Long setPreferredMagnitudeIdLocalspace) {
    this.setPreferredMagnitudeIdLocalspace = setPreferredMagnitudeIdLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return setPreferredMagnitudeIdLocalspace
  **/
  @javax.annotation.Nullable
  public Long getSetPreferredMagnitudeIdLocalspace() {
    return setPreferredMagnitudeIdLocalspace;
  }

  public void setSetPreferredMagnitudeIdLocalspace(Long setPreferredMagnitudeIdLocalspace) {
    this.setPreferredMagnitudeIdLocalspace = setPreferredMagnitudeIdLocalspace;
  }


   /**
   * Group type. Used by clustering algorithm | tinyint(4)
   * @return typeGroup
  **/
  @javax.annotation.Nullable
  public Long getTypeGroup() {
    return typeGroup;
  }



  public ObjectEvent provenance(ObjectProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  public ObjectProvenance getProvenance() {
    return provenance;
  }

  public void setProvenance(ObjectProvenance provenance) {
    this.provenance = provenance;
  }


  public ObjectEvent localspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
    return this;
  }

   /**
   * Get localspace
   * @return localspace
  **/
  @javax.annotation.Nullable
  public ObjectLocalspace getLocalspace() {
    return localspace;
  }

  public void setLocalspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
  }


  public ObjectEvent origins(List<ObjectOrigin> origins) {
    this.origins = origins;
    return this;
  }

  public ObjectEvent addOriginsItem(ObjectOrigin originsItem) {
    if (this.origins == null) {
      this.origins = new ArrayList<>();
    }
    this.origins.add(originsItem);
    return this;
  }

   /**
   * Get origins
   * @return origins
  **/
  @javax.annotation.Nullable
  public List<ObjectOrigin> getOrigins() {
    return origins;
  }

  public void setOrigins(List<ObjectOrigin> origins) {
    this.origins = origins;
  }


  public ObjectEvent strongmotions(List<ObjectStrongmotion> strongmotions) {
    this.strongmotions = strongmotions;
    return this;
  }

  public ObjectEvent addStrongmotionsItem(ObjectStrongmotion strongmotionsItem) {
    if (this.strongmotions == null) {
      this.strongmotions = new ArrayList<>();
    }
    this.strongmotions.add(strongmotionsItem);
    return this;
  }

   /**
   * Get strongmotions
   * @return strongmotions
  **/
  @javax.annotation.Nullable
  public List<ObjectStrongmotion> getStrongmotions() {
    return strongmotions;
  }

  public void setStrongmotions(List<ObjectStrongmotion> strongmotions) {
    this.strongmotions = strongmotions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObjectEvent instance itself
   */
  public ObjectEvent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectEvent objectEvent = (ObjectEvent) o;
    return Objects.equals(this.id, objectEvent.id) &&
        Objects.equals(this.modified, objectEvent.modified) &&
        Objects.equals(this.inserted, objectEvent.inserted) &&
        Objects.equals(this.idLocalspace, objectEvent.idLocalspace) &&
        Objects.equals(this.typeEvent, objectEvent.typeEvent) &&
        Objects.equals(this.flags, objectEvent.flags) &&
        Objects.equals(this.eventGroupId, objectEvent.eventGroupId) &&
        Objects.equals(this.preferredOriginId, objectEvent.preferredOriginId) &&
        Objects.equals(this.preferredMagnitudeId, objectEvent.preferredMagnitudeId) &&
        Objects.equals(this.preferredFocalmechanismId, objectEvent.preferredFocalmechanismId) &&
        Objects.equals(this.setPreferredOriginIdLocalspace, objectEvent.setPreferredOriginIdLocalspace) &&
        Objects.equals(this.setPreferredMagnitudeIdLocalspace, objectEvent.setPreferredMagnitudeIdLocalspace) &&
        Objects.equals(this.typeGroup, objectEvent.typeGroup) &&
        Objects.equals(this.provenance, objectEvent.provenance) &&
        Objects.equals(this.localspace, objectEvent.localspace) &&
        Objects.equals(this.origins, objectEvent.origins) &&
        Objects.equals(this.strongmotions, objectEvent.strongmotions)&&
        Objects.equals(this.additionalProperties, objectEvent.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, modified, inserted, idLocalspace, typeEvent, flags, eventGroupId, preferredOriginId, preferredMagnitudeId, preferredFocalmechanismId, setPreferredOriginIdLocalspace, setPreferredMagnitudeIdLocalspace, typeGroup, provenance, localspace, origins, strongmotions, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    idLocalspace: ").append(toIndentedString(idLocalspace)).append("\n");
    sb.append("    typeEvent: ").append(toIndentedString(typeEvent)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    eventGroupId: ").append(toIndentedString(eventGroupId)).append("\n");
    sb.append("    preferredOriginId: ").append(toIndentedString(preferredOriginId)).append("\n");
    sb.append("    preferredMagnitudeId: ").append(toIndentedString(preferredMagnitudeId)).append("\n");
    sb.append("    preferredFocalmechanismId: ").append(toIndentedString(preferredFocalmechanismId)).append("\n");
    sb.append("    setPreferredOriginIdLocalspace: ").append(toIndentedString(setPreferredOriginIdLocalspace)).append("\n");
    sb.append("    setPreferredMagnitudeIdLocalspace: ").append(toIndentedString(setPreferredMagnitudeIdLocalspace)).append("\n");
    sb.append("    typeGroup: ").append(toIndentedString(typeGroup)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    localspace: ").append(toIndentedString(localspace)).append("\n");
    sb.append("    origins: ").append(toIndentedString(origins)).append("\n");
    sb.append("    strongmotions: ").append(toIndentedString(strongmotions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("id_localspace");
    openapiFields.add("type_event");
    openapiFields.add("flags");
    openapiFields.add("event_group_id");
    openapiFields.add("preferred_origin_id");
    openapiFields.add("preferred_magnitude_id");
    openapiFields.add("preferred_focalmechanism_id");
    openapiFields.add("set_preferred_origin_id_localspace");
    openapiFields.add("set_preferred_magnitude_id_localspace");
    openapiFields.add("type_group");
    openapiFields.add("provenance");
    openapiFields.add("localspace");
    openapiFields.add("origins");
    openapiFields.add("strongmotions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type_event");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectEvent is not found in the empty JSON string", ObjectEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjectEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type_event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_event").toString()));
      }
      if ((jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) && !jsonObj.get("flags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ObjectProvenance.validateJsonElement(jsonObj.get("provenance"));
      }
      // validate the optional field `localspace`
      if (jsonObj.get("localspace") != null && !jsonObj.get("localspace").isJsonNull()) {
        ObjectLocalspace.validateJsonElement(jsonObj.get("localspace"));
      }
      if (jsonObj.get("origins") != null && !jsonObj.get("origins").isJsonNull()) {
        JsonArray jsonArrayorigins = jsonObj.getAsJsonArray("origins");
        if (jsonArrayorigins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("origins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `origins` to be an array in the JSON string but got `%s`", jsonObj.get("origins").toString()));
          }

          // validate the optional field `origins` (array)
          for (int i = 0; i < jsonArrayorigins.size(); i++) {
            ObjectOrigin.validateJsonElement(jsonArrayorigins.get(i));
          };
        }
      }
      if (jsonObj.get("strongmotions") != null && !jsonObj.get("strongmotions").isJsonNull()) {
        JsonArray jsonArraystrongmotions = jsonObj.getAsJsonArray("strongmotions");
        if (jsonArraystrongmotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("strongmotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `strongmotions` to be an array in the JSON string but got `%s`", jsonObj.get("strongmotions").toString()));
          }

          // validate the optional field `strongmotions` (array)
          for (int i = 0; i < jsonArraystrongmotions.size(); i++) {
            ObjectStrongmotion.validateJsonElement(jsonArraystrongmotions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectEvent>() {
           @Override
           public void write(JsonWriter out, ObjectEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ObjectEvent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectEvent
  * @throws IOException if the JSON string is invalid with respect to ObjectEvent
  */
  public static ObjectEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectEvent.class);
  }

 /**
  * Convert an instance of ObjectEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

