/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectMomenttensor;
import org.ingv.dante.model.ObjectProvenance;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectFocalmechanism
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class ObjectFocalmechanism {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_ID_LOCALSPACE = "id_localspace";
  @SerializedName(SERIALIZED_NAME_ID_LOCALSPACE)
  private Long idLocalspace;

  public static final String SERIALIZED_NAME_STRIKE1 = "strike1";
  @SerializedName(SERIALIZED_NAME_STRIKE1)
  private Integer strike1;

  public static final String SERIALIZED_NAME_DIP1 = "dip1";
  @SerializedName(SERIALIZED_NAME_DIP1)
  private Integer dip1;

  public static final String SERIALIZED_NAME_RAKE1 = "rake1";
  @SerializedName(SERIALIZED_NAME_RAKE1)
  private Integer rake1;

  public static final String SERIALIZED_NAME_STRIKE2 = "strike2";
  @SerializedName(SERIALIZED_NAME_STRIKE2)
  private Integer strike2;

  public static final String SERIALIZED_NAME_DIP2 = "dip2";
  @SerializedName(SERIALIZED_NAME_DIP2)
  private Integer dip2;

  public static final String SERIALIZED_NAME_RAKE2 = "rake2";
  @SerializedName(SERIALIZED_NAME_RAKE2)
  private Integer rake2;

  public static final String SERIALIZED_NAME_AZIM_GAP = "azim_gap";
  @SerializedName(SERIALIZED_NAME_AZIM_GAP)
  private Float azimGap;

  public static final String SERIALIZED_NAME_NSTA_POLARITY = "nsta_polarity";
  @SerializedName(SERIALIZED_NAME_NSTA_POLARITY)
  private Integer nstaPolarity;

  public static final String SERIALIZED_NAME_MISFIT = "misfit";
  @SerializedName(SERIALIZED_NAME_MISFIT)
  private Double misfit;

  public static final String SERIALIZED_NAME_STDR = "stdr";
  @SerializedName(SERIALIZED_NAME_STDR)
  private Double stdr;

  public static final String SERIALIZED_NAME_RMS_ANG_DIFF_ACC_PREF = "rms_ang_diff_acc_pref";
  @SerializedName(SERIALIZED_NAME_RMS_ANG_DIFF_ACC_PREF)
  private Double rmsAngDiffAccPref;

  public static final String SERIALIZED_NAME_FRAC_ACC30DEG_PREF = "frac_acc_30deg_pref";
  @SerializedName(SERIALIZED_NAME_FRAC_ACC30DEG_PREF)
  private Double fracAcc30degPref;

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private String quality;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_MOMENTTENSOR = "momenttensor";
  @SerializedName(SERIALIZED_NAME_MOMENTTENSOR)
  private ObjectMomenttensor momenttensor;

  public static final String SERIALIZED_NAME_LOCALSPACE = "localspace";
  @SerializedName(SERIALIZED_NAME_LOCALSPACE)
  private ObjectLocalspace localspace;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ObjectProvenance provenance;

  public ObjectFocalmechanism() {
  }

  public ObjectFocalmechanism(
     Long id, 
     OffsetDateTime modified, 
     OffsetDateTime inserted
  ) {
    this();
    this.id = id;
    this.modified = modified;
    this.inserted = inserted;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }



   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInserted() {
    return inserted;
  }



  public ObjectFocalmechanism idLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return idLocalspace
  **/
  @javax.annotation.Nullable
  public Long getIdLocalspace() {
    return idLocalspace;
  }

  public void setIdLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
  }


  public ObjectFocalmechanism strike1(Integer strike1) {
    this.strike1 = strike1;
    return this;
  }

   /**
   * strike focal plane n.1 | int(10)
   * @return strike1
  **/
  @javax.annotation.Nullable
  public Integer getStrike1() {
    return strike1;
  }

  public void setStrike1(Integer strike1) {
    this.strike1 = strike1;
  }


  public ObjectFocalmechanism dip1(Integer dip1) {
    this.dip1 = dip1;
    return this;
  }

   /**
   * dip focal plane n.1 | int(10)
   * @return dip1
  **/
  @javax.annotation.Nullable
  public Integer getDip1() {
    return dip1;
  }

  public void setDip1(Integer dip1) {
    this.dip1 = dip1;
  }


  public ObjectFocalmechanism rake1(Integer rake1) {
    this.rake1 = rake1;
    return this;
  }

   /**
   * rake focal plane n.1 | int(10)
   * @return rake1
  **/
  @javax.annotation.Nullable
  public Integer getRake1() {
    return rake1;
  }

  public void setRake1(Integer rake1) {
    this.rake1 = rake1;
  }


  public ObjectFocalmechanism strike2(Integer strike2) {
    this.strike2 = strike2;
    return this;
  }

   /**
   * strike focal plane n.2 | int(10)
   * @return strike2
  **/
  @javax.annotation.Nullable
  public Integer getStrike2() {
    return strike2;
  }

  public void setStrike2(Integer strike2) {
    this.strike2 = strike2;
  }


  public ObjectFocalmechanism dip2(Integer dip2) {
    this.dip2 = dip2;
    return this;
  }

   /**
   * dip focal plane n.2 | int(10)
   * @return dip2
  **/
  @javax.annotation.Nullable
  public Integer getDip2() {
    return dip2;
  }

  public void setDip2(Integer dip2) {
    this.dip2 = dip2;
  }


  public ObjectFocalmechanism rake2(Integer rake2) {
    this.rake2 = rake2;
    return this;
  }

   /**
   * rake focal plane n.2 | int(10)
   * @return rake2
  **/
  @javax.annotation.Nullable
  public Integer getRake2() {
    return rake2;
  }

  public void setRake2(Integer rake2) {
    this.rake2 = rake2;
  }


  public ObjectFocalmechanism azimGap(Float azimGap) {
    this.azimGap = azimGap;
    return this;
  }

   /**
   * Largest azim gap as seen from epicenter | double(22)
   * @return azimGap
  **/
  @javax.annotation.Nullable
  public Float getAzimGap() {
    return azimGap;
  }

  public void setAzimGap(Float azimGap) {
    this.azimGap = azimGap;
  }


  public ObjectFocalmechanism nstaPolarity(Integer nstaPolarity) {
    this.nstaPolarity = nstaPolarity;
    return this;
  }

   /**
   * Number of station polarities used for determination | int(10)
   * @return nstaPolarity
  **/
  @javax.annotation.Nullable
  public Integer getNstaPolarity() {
    return nstaPolarity;
  }

  public void setNstaPolarity(Integer nstaPolarity) {
    this.nstaPolarity = nstaPolarity;
  }


  public ObjectFocalmechanism misfit(Double misfit) {
    this.misfit = misfit;
    return this;
  }

   /**
   * Fraction of misfit polarities [0,1] | double(22)
   * @return misfit
  **/
  @javax.annotation.Nullable
  public Double getMisfit() {
    return misfit;
  }

  public void setMisfit(Double misfit) {
    this.misfit = misfit;
  }


  public ObjectFocalmechanism stdr(Double stdr) {
    this.stdr = stdr;
    return this;
  }

   /**
   * Station distribution ratio parameter [0,1] | double(22)
   * @return stdr
  **/
  @javax.annotation.Nullable
  public Double getStdr() {
    return stdr;
  }

  public void setStdr(Double stdr) {
    this.stdr = stdr;
  }


  public ObjectFocalmechanism rmsAngDiffAccPref(Double rmsAngDiffAccPref) {
    this.rmsAngDiffAccPref = rmsAngDiffAccPref;
    return this;
  }

   /**
   * rms_ang_diff_acc_pref | double(22)
   * @return rmsAngDiffAccPref
  **/
  @javax.annotation.Nullable
  public Double getRmsAngDiffAccPref() {
    return rmsAngDiffAccPref;
  }

  public void setRmsAngDiffAccPref(Double rmsAngDiffAccPref) {
    this.rmsAngDiffAccPref = rmsAngDiffAccPref;
  }


  public ObjectFocalmechanism fracAcc30degPref(Double fracAcc30degPref) {
    this.fracAcc30degPref = fracAcc30degPref;
    return this;
  }

   /**
   * frac_acc_30deg_pref | double(22)
   * @return fracAcc30degPref
  **/
  @javax.annotation.Nullable
  public Double getFracAcc30degPref() {
    return fracAcc30degPref;
  }

  public void setFracAcc30degPref(Double fracAcc30degPref) {
    this.fracAcc30degPref = fracAcc30degPref;
  }


  public ObjectFocalmechanism quality(String quality) {
    this.quality = quality;
    return this;
  }

   /**
   * quality | char(2)
   * @return quality
  **/
  @javax.annotation.Nullable
  public String getQuality() {
    return quality;
  }

  public void setQuality(String quality) {
    this.quality = quality;
  }


  public ObjectFocalmechanism url(String url) {
    this.url = url;
    return this;
  }

   /**
   * External URL Reference | varchar(512)
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ObjectFocalmechanism momenttensor(ObjectMomenttensor momenttensor) {
    this.momenttensor = momenttensor;
    return this;
  }

   /**
   * Get momenttensor
   * @return momenttensor
  **/
  @javax.annotation.Nullable
  public ObjectMomenttensor getMomenttensor() {
    return momenttensor;
  }

  public void setMomenttensor(ObjectMomenttensor momenttensor) {
    this.momenttensor = momenttensor;
  }


  public ObjectFocalmechanism localspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
    return this;
  }

   /**
   * Get localspace
   * @return localspace
  **/
  @javax.annotation.Nullable
  public ObjectLocalspace getLocalspace() {
    return localspace;
  }

  public void setLocalspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
  }


  public ObjectFocalmechanism provenance(ObjectProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  public ObjectProvenance getProvenance() {
    return provenance;
  }

  public void setProvenance(ObjectProvenance provenance) {
    this.provenance = provenance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObjectFocalmechanism instance itself
   */
  public ObjectFocalmechanism putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectFocalmechanism objectFocalmechanism = (ObjectFocalmechanism) o;
    return Objects.equals(this.id, objectFocalmechanism.id) &&
        Objects.equals(this.modified, objectFocalmechanism.modified) &&
        Objects.equals(this.inserted, objectFocalmechanism.inserted) &&
        Objects.equals(this.idLocalspace, objectFocalmechanism.idLocalspace) &&
        Objects.equals(this.strike1, objectFocalmechanism.strike1) &&
        Objects.equals(this.dip1, objectFocalmechanism.dip1) &&
        Objects.equals(this.rake1, objectFocalmechanism.rake1) &&
        Objects.equals(this.strike2, objectFocalmechanism.strike2) &&
        Objects.equals(this.dip2, objectFocalmechanism.dip2) &&
        Objects.equals(this.rake2, objectFocalmechanism.rake2) &&
        Objects.equals(this.azimGap, objectFocalmechanism.azimGap) &&
        Objects.equals(this.nstaPolarity, objectFocalmechanism.nstaPolarity) &&
        Objects.equals(this.misfit, objectFocalmechanism.misfit) &&
        Objects.equals(this.stdr, objectFocalmechanism.stdr) &&
        Objects.equals(this.rmsAngDiffAccPref, objectFocalmechanism.rmsAngDiffAccPref) &&
        Objects.equals(this.fracAcc30degPref, objectFocalmechanism.fracAcc30degPref) &&
        Objects.equals(this.quality, objectFocalmechanism.quality) &&
        Objects.equals(this.url, objectFocalmechanism.url) &&
        Objects.equals(this.momenttensor, objectFocalmechanism.momenttensor) &&
        Objects.equals(this.localspace, objectFocalmechanism.localspace) &&
        Objects.equals(this.provenance, objectFocalmechanism.provenance)&&
        Objects.equals(this.additionalProperties, objectFocalmechanism.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, modified, inserted, idLocalspace, strike1, dip1, rake1, strike2, dip2, rake2, azimGap, nstaPolarity, misfit, stdr, rmsAngDiffAccPref, fracAcc30degPref, quality, url, momenttensor, localspace, provenance, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectFocalmechanism {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    idLocalspace: ").append(toIndentedString(idLocalspace)).append("\n");
    sb.append("    strike1: ").append(toIndentedString(strike1)).append("\n");
    sb.append("    dip1: ").append(toIndentedString(dip1)).append("\n");
    sb.append("    rake1: ").append(toIndentedString(rake1)).append("\n");
    sb.append("    strike2: ").append(toIndentedString(strike2)).append("\n");
    sb.append("    dip2: ").append(toIndentedString(dip2)).append("\n");
    sb.append("    rake2: ").append(toIndentedString(rake2)).append("\n");
    sb.append("    azimGap: ").append(toIndentedString(azimGap)).append("\n");
    sb.append("    nstaPolarity: ").append(toIndentedString(nstaPolarity)).append("\n");
    sb.append("    misfit: ").append(toIndentedString(misfit)).append("\n");
    sb.append("    stdr: ").append(toIndentedString(stdr)).append("\n");
    sb.append("    rmsAngDiffAccPref: ").append(toIndentedString(rmsAngDiffAccPref)).append("\n");
    sb.append("    fracAcc30degPref: ").append(toIndentedString(fracAcc30degPref)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    momenttensor: ").append(toIndentedString(momenttensor)).append("\n");
    sb.append("    localspace: ").append(toIndentedString(localspace)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("id_localspace");
    openapiFields.add("strike1");
    openapiFields.add("dip1");
    openapiFields.add("rake1");
    openapiFields.add("strike2");
    openapiFields.add("dip2");
    openapiFields.add("rake2");
    openapiFields.add("azim_gap");
    openapiFields.add("nsta_polarity");
    openapiFields.add("misfit");
    openapiFields.add("stdr");
    openapiFields.add("rms_ang_diff_acc_pref");
    openapiFields.add("frac_acc_30deg_pref");
    openapiFields.add("quality");
    openapiFields.add("url");
    openapiFields.add("momenttensor");
    openapiFields.add("localspace");
    openapiFields.add("provenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectFocalmechanism
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectFocalmechanism.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectFocalmechanism is not found in the empty JSON string", ObjectFocalmechanism.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) && !jsonObj.get("quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `momenttensor`
      if (jsonObj.get("momenttensor") != null && !jsonObj.get("momenttensor").isJsonNull()) {
        ObjectMomenttensor.validateJsonElement(jsonObj.get("momenttensor"));
      }
      // validate the optional field `localspace`
      if (jsonObj.get("localspace") != null && !jsonObj.get("localspace").isJsonNull()) {
        ObjectLocalspace.validateJsonElement(jsonObj.get("localspace"));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ObjectProvenance.validateJsonElement(jsonObj.get("provenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectFocalmechanism.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectFocalmechanism' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectFocalmechanism> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectFocalmechanism.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectFocalmechanism>() {
           @Override
           public void write(JsonWriter out, ObjectFocalmechanism value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectFocalmechanism read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ObjectFocalmechanism instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectFocalmechanism given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectFocalmechanism
  * @throws IOException if the JSON string is invalid with respect to ObjectFocalmechanism
  */
  public static ObjectFocalmechanism fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectFocalmechanism.class);
  }

 /**
  * Convert an instance of ObjectFocalmechanism to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

