/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectProvenance;
import org.ingv.dante.model.ObjectStationmagnitude;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectMagnitude
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class ObjectMagnitude {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_ID_LOCALSPACE = "id_localspace";
  @SerializedName(SERIALIZED_NAME_ID_LOCALSPACE)
  private Long idLocalspace;

  public static final String SERIALIZED_NAME_MAG = "mag";
  @SerializedName(SERIALIZED_NAME_MAG)
  private Double mag;

  public static final String SERIALIZED_NAME_LOWER_UNCERTAINTY = "lower_uncertainty";
  @SerializedName(SERIALIZED_NAME_LOWER_UNCERTAINTY)
  private Double lowerUncertainty;

  public static final String SERIALIZED_NAME_UPPER_UNCERTAINTY = "upper_uncertainty";
  @SerializedName(SERIALIZED_NAME_UPPER_UNCERTAINTY)
  private Double upperUncertainty;

  public static final String SERIALIZED_NAME_CONFIDENCE_LEVEL = "confidence_level";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_LEVEL)
  private Float confidenceLevel = 68.3f;

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private Double quality;

  public static final String SERIALIZED_NAME_MIN_DISTANCE = "min_distance";
  @SerializedName(SERIALIZED_NAME_MIN_DISTANCE)
  private Double minDistance;

  public static final String SERIALIZED_NAME_AZIMUT = "azimut";
  @SerializedName(SERIALIZED_NAME_AZIMUT)
  private Float azimut;

  public static final String SERIALIZED_NAME_NSTA = "nsta";
  @SerializedName(SERIALIZED_NAME_NSTA)
  private Long nsta;

  public static final String SERIALIZED_NAME_NCHA = "ncha";
  @SerializedName(SERIALIZED_NAME_NCHA)
  private Long ncha;

  public static final String SERIALIZED_NAME_NSTA_USED = "nsta_used";
  @SerializedName(SERIALIZED_NAME_NSTA_USED)
  private Long nstaUsed;

  public static final String SERIALIZED_NAME_NCHA_USED = "ncha_used";
  @SerializedName(SERIALIZED_NAME_NCHA_USED)
  private Long nchaUsed;

  public static final String SERIALIZED_NAME_MAG_QUALITY = "mag_quality";
  @SerializedName(SERIALIZED_NAME_MAG_QUALITY)
  private String magQuality;

  public static final String SERIALIZED_NAME_TYPE_MAGNITUDE = "type_magnitude";
  @SerializedName(SERIALIZED_NAME_TYPE_MAGNITUDE)
  private String typeMagnitude;

  public static final String SERIALIZED_NAME_TYPE_MAGNITUDE_PRIORITY = "type_magnitude_priority";
  @SerializedName(SERIALIZED_NAME_TYPE_MAGNITUDE_PRIORITY)
  private Long typeMagnitudePriority = 0l;

  public static final String SERIALIZED_NAME_LOCALSPACE = "localspace";
  @SerializedName(SERIALIZED_NAME_LOCALSPACE)
  private ObjectLocalspace localspace;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ObjectProvenance provenance;

  public static final String SERIALIZED_NAME_STATIONMAGNITUDES = "stationmagnitudes";
  @SerializedName(SERIALIZED_NAME_STATIONMAGNITUDES)
  private List<ObjectStationmagnitude> stationmagnitudes;

  public ObjectMagnitude() {
  }

  public ObjectMagnitude(
     Long id, 
     OffsetDateTime modified, 
     OffsetDateTime inserted, 
     Long typeMagnitudePriority
  ) {
    this();
    this.id = id;
    this.modified = modified;
    this.inserted = inserted;
    this.typeMagnitudePriority = typeMagnitudePriority;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }



   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInserted() {
    return inserted;
  }



  public ObjectMagnitude idLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return idLocalspace
  **/
  @javax.annotation.Nullable
  public Long getIdLocalspace() {
    return idLocalspace;
  }

  public void setIdLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
  }


  public ObjectMagnitude mag(Double mag) {
    this.mag = mag;
    return this;
  }

   /**
   * Magnitude value | double
   * @return mag
  **/
  @javax.annotation.Nonnull
  public Double getMag() {
    return mag;
  }

  public void setMag(Double mag) {
    this.mag = mag;
  }


  public ObjectMagnitude lowerUncertainty(Double lowerUncertainty) {
    this.lowerUncertainty = lowerUncertainty;
    return this;
  }

   /**
   * Magnitude lower_uncertainty | double
   * @return lowerUncertainty
  **/
  @javax.annotation.Nullable
  public Double getLowerUncertainty() {
    return lowerUncertainty;
  }

  public void setLowerUncertainty(Double lowerUncertainty) {
    this.lowerUncertainty = lowerUncertainty;
  }


  public ObjectMagnitude upperUncertainty(Double upperUncertainty) {
    this.upperUncertainty = upperUncertainty;
    return this;
  }

   /**
   * Magnitude upper_uncertainty | double
   * @return upperUncertainty
  **/
  @javax.annotation.Nullable
  public Double getUpperUncertainty() {
    return upperUncertainty;
  }

  public void setUpperUncertainty(Double upperUncertainty) {
    this.upperUncertainty = upperUncertainty;
  }


  public ObjectMagnitude confidenceLevel(Float confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
    return this;
  }

   /**
   * Integer numer for confidence level type (68.3 1 sigma, xx &#x3D;2 sigma, 99% 3 sigma) | decimal(5.2)
   * @return confidenceLevel
  **/
  @javax.annotation.Nullable
  public Float getConfidenceLevel() {
    return confidenceLevel;
  }

  public void setConfidenceLevel(Float confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
  }


  public ObjectMagnitude quality(Double quality) {
    this.quality = quality;
    return this;
  }

   /**
   * quality | double
   * @return quality
  **/
  @javax.annotation.Nullable
  public Double getQuality() {
    return quality;
  }

  public void setQuality(Double quality) {
    this.quality = quality;
  }


  public ObjectMagnitude minDistance(Double minDistance) {
    this.minDistance = minDistance;
    return this;
  }

   /**
   * Minimal distance from station to origin | double
   * @return minDistance
  **/
  @javax.annotation.Nullable
  public Double getMinDistance() {
    return minDistance;
  }

  public void setMinDistance(Double minDistance) {
    this.minDistance = minDistance;
  }


  public ObjectMagnitude azimut(Float azimut) {
    this.azimut = azimut;
    return this;
  }

   /**
   * Azimutal gap | float4
   * @return azimut
  **/
  @javax.annotation.Nullable
  public Float getAzimut() {
    return azimut;
  }

  public void setAzimut(Float azimut) {
    this.azimut = azimut;
  }


  public ObjectMagnitude nsta(Long nsta) {
    this.nsta = nsta;
    return this;
  }

   /**
   * Number of the stations on magnitudo calculation | int(11)
   * @return nsta
  **/
  @javax.annotation.Nullable
  public Long getNsta() {
    return nsta;
  }

  public void setNsta(Long nsta) {
    this.nsta = nsta;
  }


  public ObjectMagnitude ncha(Long ncha) {
    this.ncha = ncha;
    return this;
  }

   /**
   * Number of the channel on magnitudo calculation | int(11)
   * @return ncha
  **/
  @javax.annotation.Nullable
  public Long getNcha() {
    return ncha;
  }

  public void setNcha(Long ncha) {
    this.ncha = ncha;
  }


  public ObjectMagnitude nstaUsed(Long nstaUsed) {
    this.nstaUsed = nstaUsed;
    return this;
  }

   /**
   * Number of the stations used on magnitudo calculation | int(11)
   * @return nstaUsed
  **/
  @javax.annotation.Nullable
  public Long getNstaUsed() {
    return nstaUsed;
  }

  public void setNstaUsed(Long nstaUsed) {
    this.nstaUsed = nstaUsed;
  }


  public ObjectMagnitude nchaUsed(Long nchaUsed) {
    this.nchaUsed = nchaUsed;
    return this;
  }

   /**
   * Number of the channels used on magnitude calculation | int(11)
   * @return nchaUsed
  **/
  @javax.annotation.Nullable
  public Long getNchaUsed() {
    return nchaUsed;
  }

  public void setNchaUsed(Long nchaUsed) {
    this.nchaUsed = nchaUsed;
  }


  public ObjectMagnitude magQuality(String magQuality) {
    this.magQuality = magQuality;
    return this;
  }

   /**
   * INGV quality code of the magnitude (computed by ew2moledb) | char(2)
   * @return magQuality
  **/
  @javax.annotation.Nullable
  public String getMagQuality() {
    return magQuality;
  }

  public void setMagQuality(String magQuality) {
    this.magQuality = magQuality;
  }


  public ObjectMagnitude typeMagnitude(String typeMagnitude) {
    this.typeMagnitude = typeMagnitude;
    return this;
  }

   /**
   * Type of the magnitude | varchar(255)
   * @return typeMagnitude
  **/
  @javax.annotation.Nonnull
  public String getTypeMagnitude() {
    return typeMagnitude;
  }

  public void setTypeMagnitude(String typeMagnitude) {
    this.typeMagnitude = typeMagnitude;
  }


   /**
   * Priority | int(8)
   * @return typeMagnitudePriority
  **/
  @javax.annotation.Nullable
  public Long getTypeMagnitudePriority() {
    return typeMagnitudePriority;
  }



  public ObjectMagnitude localspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
    return this;
  }

   /**
   * Get localspace
   * @return localspace
  **/
  @javax.annotation.Nullable
  public ObjectLocalspace getLocalspace() {
    return localspace;
  }

  public void setLocalspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
  }


  public ObjectMagnitude provenance(ObjectProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  public ObjectProvenance getProvenance() {
    return provenance;
  }

  public void setProvenance(ObjectProvenance provenance) {
    this.provenance = provenance;
  }


  public ObjectMagnitude stationmagnitudes(List<ObjectStationmagnitude> stationmagnitudes) {
    this.stationmagnitudes = stationmagnitudes;
    return this;
  }

  public ObjectMagnitude addStationmagnitudesItem(ObjectStationmagnitude stationmagnitudesItem) {
    if (this.stationmagnitudes == null) {
      this.stationmagnitudes = new ArrayList<>();
    }
    this.stationmagnitudes.add(stationmagnitudesItem);
    return this;
  }

   /**
   * Get stationmagnitudes
   * @return stationmagnitudes
  **/
  @javax.annotation.Nullable
  public List<ObjectStationmagnitude> getStationmagnitudes() {
    return stationmagnitudes;
  }

  public void setStationmagnitudes(List<ObjectStationmagnitude> stationmagnitudes) {
    this.stationmagnitudes = stationmagnitudes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObjectMagnitude instance itself
   */
  public ObjectMagnitude putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectMagnitude objectMagnitude = (ObjectMagnitude) o;
    return Objects.equals(this.id, objectMagnitude.id) &&
        Objects.equals(this.modified, objectMagnitude.modified) &&
        Objects.equals(this.inserted, objectMagnitude.inserted) &&
        Objects.equals(this.idLocalspace, objectMagnitude.idLocalspace) &&
        Objects.equals(this.mag, objectMagnitude.mag) &&
        Objects.equals(this.lowerUncertainty, objectMagnitude.lowerUncertainty) &&
        Objects.equals(this.upperUncertainty, objectMagnitude.upperUncertainty) &&
        Objects.equals(this.confidenceLevel, objectMagnitude.confidenceLevel) &&
        Objects.equals(this.quality, objectMagnitude.quality) &&
        Objects.equals(this.minDistance, objectMagnitude.minDistance) &&
        Objects.equals(this.azimut, objectMagnitude.azimut) &&
        Objects.equals(this.nsta, objectMagnitude.nsta) &&
        Objects.equals(this.ncha, objectMagnitude.ncha) &&
        Objects.equals(this.nstaUsed, objectMagnitude.nstaUsed) &&
        Objects.equals(this.nchaUsed, objectMagnitude.nchaUsed) &&
        Objects.equals(this.magQuality, objectMagnitude.magQuality) &&
        Objects.equals(this.typeMagnitude, objectMagnitude.typeMagnitude) &&
        Objects.equals(this.typeMagnitudePriority, objectMagnitude.typeMagnitudePriority) &&
        Objects.equals(this.localspace, objectMagnitude.localspace) &&
        Objects.equals(this.provenance, objectMagnitude.provenance) &&
        Objects.equals(this.stationmagnitudes, objectMagnitude.stationmagnitudes)&&
        Objects.equals(this.additionalProperties, objectMagnitude.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, modified, inserted, idLocalspace, mag, lowerUncertainty, upperUncertainty, confidenceLevel, quality, minDistance, azimut, nsta, ncha, nstaUsed, nchaUsed, magQuality, typeMagnitude, typeMagnitudePriority, localspace, provenance, stationmagnitudes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectMagnitude {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    idLocalspace: ").append(toIndentedString(idLocalspace)).append("\n");
    sb.append("    mag: ").append(toIndentedString(mag)).append("\n");
    sb.append("    lowerUncertainty: ").append(toIndentedString(lowerUncertainty)).append("\n");
    sb.append("    upperUncertainty: ").append(toIndentedString(upperUncertainty)).append("\n");
    sb.append("    confidenceLevel: ").append(toIndentedString(confidenceLevel)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    minDistance: ").append(toIndentedString(minDistance)).append("\n");
    sb.append("    azimut: ").append(toIndentedString(azimut)).append("\n");
    sb.append("    nsta: ").append(toIndentedString(nsta)).append("\n");
    sb.append("    ncha: ").append(toIndentedString(ncha)).append("\n");
    sb.append("    nstaUsed: ").append(toIndentedString(nstaUsed)).append("\n");
    sb.append("    nchaUsed: ").append(toIndentedString(nchaUsed)).append("\n");
    sb.append("    magQuality: ").append(toIndentedString(magQuality)).append("\n");
    sb.append("    typeMagnitude: ").append(toIndentedString(typeMagnitude)).append("\n");
    sb.append("    typeMagnitudePriority: ").append(toIndentedString(typeMagnitudePriority)).append("\n");
    sb.append("    localspace: ").append(toIndentedString(localspace)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    stationmagnitudes: ").append(toIndentedString(stationmagnitudes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("id_localspace");
    openapiFields.add("mag");
    openapiFields.add("lower_uncertainty");
    openapiFields.add("upper_uncertainty");
    openapiFields.add("confidence_level");
    openapiFields.add("quality");
    openapiFields.add("min_distance");
    openapiFields.add("azimut");
    openapiFields.add("nsta");
    openapiFields.add("ncha");
    openapiFields.add("nsta_used");
    openapiFields.add("ncha_used");
    openapiFields.add("mag_quality");
    openapiFields.add("type_magnitude");
    openapiFields.add("type_magnitude_priority");
    openapiFields.add("localspace");
    openapiFields.add("provenance");
    openapiFields.add("stationmagnitudes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mag");
    openapiRequiredFields.add("type_magnitude");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectMagnitude
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectMagnitude.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectMagnitude is not found in the empty JSON string", ObjectMagnitude.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjectMagnitude.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mag_quality") != null && !jsonObj.get("mag_quality").isJsonNull()) && !jsonObj.get("mag_quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mag_quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mag_quality").toString()));
      }
      if (!jsonObj.get("type_magnitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_magnitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_magnitude").toString()));
      }
      // validate the optional field `localspace`
      if (jsonObj.get("localspace") != null && !jsonObj.get("localspace").isJsonNull()) {
        ObjectLocalspace.validateJsonElement(jsonObj.get("localspace"));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ObjectProvenance.validateJsonElement(jsonObj.get("provenance"));
      }
      if (jsonObj.get("stationmagnitudes") != null && !jsonObj.get("stationmagnitudes").isJsonNull()) {
        JsonArray jsonArraystationmagnitudes = jsonObj.getAsJsonArray("stationmagnitudes");
        if (jsonArraystationmagnitudes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stationmagnitudes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stationmagnitudes` to be an array in the JSON string but got `%s`", jsonObj.get("stationmagnitudes").toString()));
          }

          // validate the optional field `stationmagnitudes` (array)
          for (int i = 0; i < jsonArraystationmagnitudes.size(); i++) {
            ObjectStationmagnitude.validateJsonElement(jsonArraystationmagnitudes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectMagnitude.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectMagnitude' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectMagnitude> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectMagnitude.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectMagnitude>() {
           @Override
           public void write(JsonWriter out, ObjectMagnitude value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectMagnitude read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ObjectMagnitude instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectMagnitude given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectMagnitude
  * @throws IOException if the JSON string is invalid with respect to ObjectMagnitude
  */
  public static ObjectMagnitude fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectMagnitude.class);
  }

 /**
  * Convert an instance of ObjectMagnitude to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

