/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.ingv.dante.model.ObjectLocalspaceForVw;
import org.ingv.dante.model.ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ID_LOCALSPACE = "id_localspace";
  @SerializedName(SERIALIZED_NAME_ID_LOCALSPACE)
  private Long idLocalspace;

  public static final String SERIALIZED_NAME_MAG = "mag";
  @SerializedName(SERIALIZED_NAME_MAG)
  private Double mag;

  public static final String SERIALIZED_NAME_TYPE_MAGNITUDE = "type_magnitude";
  @SerializedName(SERIALIZED_NAME_TYPE_MAGNITUDE)
  private String typeMagnitude;

  public static final String SERIALIZED_NAME_LOWER_UNCERTAINTY = "lower_uncertainty";
  @SerializedName(SERIALIZED_NAME_LOWER_UNCERTAINTY)
  private Double lowerUncertainty;

  public static final String SERIALIZED_NAME_UPPER_UNCERTAINTY = "upper_uncertainty";
  @SerializedName(SERIALIZED_NAME_UPPER_UNCERTAINTY)
  private Double upperUncertainty;

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private Double quality;

  public static final String SERIALIZED_NAME_MAG_QUALITY = "mag_quality";
  @SerializedName(SERIALIZED_NAME_MAG_QUALITY)
  private String magQuality;

  public static final String SERIALIZED_NAME_ORIGINID = "originid";
  @SerializedName(SERIALIZED_NAME_ORIGINID)
  private Long originid;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_LOCALSPACE = "localspace";
  @SerializedName(SERIALIZED_NAME_LOCALSPACE)
  private ObjectLocalspaceForVw localspace;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup provenance;

  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup() {
  }

  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup(
     OffsetDateTime modified, 
     OffsetDateTime inserted
  ) {
    this();
    this.modified = modified;
    this.inserted = inserted;
  }

  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup idLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return idLocalspace
  **/
  @javax.annotation.Nullable
  public Long getIdLocalspace() {
    return idLocalspace;
  }

  public void setIdLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup mag(Double mag) {
    this.mag = mag;
    return this;
  }

   /**
   * Magnitude value | double
   * @return mag
  **/
  @javax.annotation.Nullable
  public Double getMag() {
    return mag;
  }

  public void setMag(Double mag) {
    this.mag = mag;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup typeMagnitude(String typeMagnitude) {
    this.typeMagnitude = typeMagnitude;
    return this;
  }

   /**
   * Type of the magnitude | varchar(255)
   * @return typeMagnitude
  **/
  @javax.annotation.Nullable
  public String getTypeMagnitude() {
    return typeMagnitude;
  }

  public void setTypeMagnitude(String typeMagnitude) {
    this.typeMagnitude = typeMagnitude;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup lowerUncertainty(Double lowerUncertainty) {
    this.lowerUncertainty = lowerUncertainty;
    return this;
  }

   /**
   * Magnitude lower_uncertainty | double
   * @return lowerUncertainty
  **/
  @javax.annotation.Nullable
  public Double getLowerUncertainty() {
    return lowerUncertainty;
  }

  public void setLowerUncertainty(Double lowerUncertainty) {
    this.lowerUncertainty = lowerUncertainty;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup upperUncertainty(Double upperUncertainty) {
    this.upperUncertainty = upperUncertainty;
    return this;
  }

   /**
   * Magnitude upper_uncertainty | double
   * @return upperUncertainty
  **/
  @javax.annotation.Nullable
  public Double getUpperUncertainty() {
    return upperUncertainty;
  }

  public void setUpperUncertainty(Double upperUncertainty) {
    this.upperUncertainty = upperUncertainty;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup quality(Double quality) {
    this.quality = quality;
    return this;
  }

   /**
   * quality | double
   * @return quality
  **/
  @javax.annotation.Nullable
  public Double getQuality() {
    return quality;
  }

  public void setQuality(Double quality) {
    this.quality = quality;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup magQuality(String magQuality) {
    this.magQuality = magQuality;
    return this;
  }

   /**
   * INGV quality code of the magnitude (computed by ew2moledb) | char(2)
   * @return magQuality
  **/
  @javax.annotation.Nullable
  public String getMagQuality() {
    return magQuality;
  }

  public void setMagQuality(String magQuality) {
    this.magQuality = magQuality;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup originid(Long originid) {
    this.originid = originid;
    return this;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return originid
  **/
  @javax.annotation.Nullable
  public Long getOriginid() {
    return originid;
  }

  public void setOriginid(Long originid) {
    this.originid = originid;
  }


   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }



   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInserted() {
    return inserted;
  }



  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup localspace(ObjectLocalspaceForVw localspace) {
    this.localspace = localspace;
    return this;
  }

   /**
   * Get localspace
   * @return localspace
  **/
  @javax.annotation.Nullable
  public ObjectLocalspaceForVw getLocalspace() {
    return localspace;
  }

  public void setLocalspace(ObjectLocalspaceForVw localspace) {
    this.localspace = localspace;
  }


  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup provenance(ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  public ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup getProvenance() {
    return provenance;
  }

  public void setProvenance(ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup provenance) {
    this.provenance = provenance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup instance itself
   */
  public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup = (ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup) o;
    return Objects.equals(this.id, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.id) &&
        Objects.equals(this.idLocalspace, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.idLocalspace) &&
        Objects.equals(this.mag, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.mag) &&
        Objects.equals(this.typeMagnitude, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.typeMagnitude) &&
        Objects.equals(this.lowerUncertainty, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.lowerUncertainty) &&
        Objects.equals(this.upperUncertainty, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.upperUncertainty) &&
        Objects.equals(this.quality, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.quality) &&
        Objects.equals(this.magQuality, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.magQuality) &&
        Objects.equals(this.originid, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.originid) &&
        Objects.equals(this.modified, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.modified) &&
        Objects.equals(this.inserted, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.inserted) &&
        Objects.equals(this.localspace, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.localspace) &&
        Objects.equals(this.provenance, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.provenance)&&
        Objects.equals(this.additionalProperties, objectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, idLocalspace, mag, typeMagnitude, lowerUncertainty, upperUncertainty, quality, magQuality, originid, modified, inserted, localspace, provenance, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idLocalspace: ").append(toIndentedString(idLocalspace)).append("\n");
    sb.append("    mag: ").append(toIndentedString(mag)).append("\n");
    sb.append("    typeMagnitude: ").append(toIndentedString(typeMagnitude)).append("\n");
    sb.append("    lowerUncertainty: ").append(toIndentedString(lowerUncertainty)).append("\n");
    sb.append("    upperUncertainty: ").append(toIndentedString(upperUncertainty)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    magQuality: ").append(toIndentedString(magQuality)).append("\n");
    sb.append("    originid: ").append(toIndentedString(originid)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    localspace: ").append(toIndentedString(localspace)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("id_localspace");
    openapiFields.add("mag");
    openapiFields.add("type_magnitude");
    openapiFields.add("lower_uncertainty");
    openapiFields.add("upper_uncertainty");
    openapiFields.add("quality");
    openapiFields.add("mag_quality");
    openapiFields.add("originid");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("localspace");
    openapiFields.add("provenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup is not found in the empty JSON string", ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type_magnitude") != null && !jsonObj.get("type_magnitude").isJsonNull()) && !jsonObj.get("type_magnitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_magnitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_magnitude").toString()));
      }
      if ((jsonObj.get("mag_quality") != null && !jsonObj.get("mag_quality").isJsonNull()) && !jsonObj.get("mag_quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mag_quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mag_quality").toString()));
      }
      // validate the optional field `localspace`
      if (jsonObj.get("localspace") != null && !jsonObj.get("localspace").isJsonNull()) {
        ObjectLocalspaceForVw.validateJsonElement(jsonObj.get("localspace"));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup.validateJsonElement(jsonObj.get("provenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup>() {
           @Override
           public void write(JsonWriter out, ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup
  * @throws IOException if the JSON string is invalid with respect to ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup
  */
  public static ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup.class);
  }

 /**
  * Convert an instance of ObjectMagnitudeForMagnitudesOriginsEventsAndEventsGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

