/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ingv.dante.model.ObjectArrival;
import org.ingv.dante.model.ObjectFocalmechanism;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectMagnitude;
import org.ingv.dante.model.ObjectProvenance;
import org.ingv.dante.model.ObjectTypeOrigin;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectOrigin
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class ObjectOrigin {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_ID_LOCALSPACE = "id_localspace";
  @SerializedName(SERIALIZED_NAME_ID_LOCALSPACE)
  private Long idLocalspace;

  public static final String SERIALIZED_NAME_AZIM_GAP = "azim_gap";
  @SerializedName(SERIALIZED_NAME_AZIM_GAP)
  private Float azimGap;

  public static final String SERIALIZED_NAME_CONFIDENCE_LEVEL = "confidence_level";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_LEVEL)
  private Float confidenceLevel = 68.3f;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  private Double depth;

  public static final String SERIALIZED_NAME_E0 = "e0";
  @SerializedName(SERIALIZED_NAME_E0)
  private Double e0;

  public static final String SERIALIZED_NAME_E0_AZ = "e0_az";
  @SerializedName(SERIALIZED_NAME_E0_AZ)
  private Float e0Az;

  public static final String SERIALIZED_NAME_E0_DIP = "e0_dip";
  @SerializedName(SERIALIZED_NAME_E0_DIP)
  private Double e0Dip;

  public static final String SERIALIZED_NAME_E1 = "e1";
  @SerializedName(SERIALIZED_NAME_E1)
  private Double e1;

  public static final String SERIALIZED_NAME_E1_AZ = "e1_az";
  @SerializedName(SERIALIZED_NAME_E1_AZ)
  private Float e1Az;

  public static final String SERIALIZED_NAME_E1_DIP = "e1_dip";
  @SerializedName(SERIALIZED_NAME_E1_DIP)
  private Double e1Dip;

  public static final String SERIALIZED_NAME_E2 = "e2";
  @SerializedName(SERIALIZED_NAME_E2)
  private Double e2;

  public static final String SERIALIZED_NAME_E2_AZ = "e2_az";
  @SerializedName(SERIALIZED_NAME_E2_AZ)
  private Float e2Az;

  public static final String SERIALIZED_NAME_E2_DIP = "e2_dip";
  @SerializedName(SERIALIZED_NAME_E2_DIP)
  private Long e2Dip;

  public static final String SERIALIZED_NAME_ERR_DEPTH = "err_depth";
  @SerializedName(SERIALIZED_NAME_ERR_DEPTH)
  private Double errDepth;

  public static final String SERIALIZED_NAME_ERR_H = "err_h";
  @SerializedName(SERIALIZED_NAME_ERR_H)
  private Double errH;

  public static final String SERIALIZED_NAME_ERR_LAT = "err_lat";
  @SerializedName(SERIALIZED_NAME_ERR_LAT)
  private Double errLat;

  public static final String SERIALIZED_NAME_ERR_LON = "err_lon";
  @SerializedName(SERIALIZED_NAME_ERR_LON)
  private Double errLon;

  public static final String SERIALIZED_NAME_ERR_LAT_DEG = "err_lat_deg";
  @SerializedName(SERIALIZED_NAME_ERR_LAT_DEG)
  private Double errLatDeg;

  public static final String SERIALIZED_NAME_ERR_LON_DEG = "err_lon_deg";
  @SerializedName(SERIALIZED_NAME_ERR_LON_DEG)
  private Double errLonDeg;

  public static final String SERIALIZED_NAME_ERR_OT = "err_ot";
  @SerializedName(SERIALIZED_NAME_ERR_OT)
  private Double errOt;

  public static final String SERIALIZED_NAME_ERR_Z = "err_z";
  @SerializedName(SERIALIZED_NAME_ERR_Z)
  private Double errZ;

  public static final String SERIALIZED_NAME_FIX_DEPTH = "fix_depth";
  @SerializedName(SERIALIZED_NAME_FIX_DEPTH)
  private Boolean fixDepth = false;

  public static final String SERIALIZED_NAME_IS_CENTROID = "is_centroid";
  @SerializedName(SERIALIZED_NAME_IS_CENTROID)
  private Boolean isCentroid = false;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private Double lon;

  public static final String SERIALIZED_NAME_MAX_DISTANCE = "max_distance";
  @SerializedName(SERIALIZED_NAME_MAX_DISTANCE)
  private Double maxDistance;

  public static final String SERIALIZED_NAME_MED_DISTANCE = "med_distance";
  @SerializedName(SERIALIZED_NAME_MED_DISTANCE)
  private Double medDistance;

  public static final String SERIALIZED_NAME_MIN_DISTANCE = "min_distance";
  @SerializedName(SERIALIZED_NAME_MIN_DISTANCE)
  private Double minDistance;

  public static final String SERIALIZED_NAME_NPH = "nph";
  @SerializedName(SERIALIZED_NAME_NPH)
  private Long nph;

  public static final String SERIALIZED_NAME_NPH_FM = "nph_fm";
  @SerializedName(SERIALIZED_NAME_NPH_FM)
  private Long nphFm;

  public static final String SERIALIZED_NAME_NPH_S = "nph_s";
  @SerializedName(SERIALIZED_NAME_NPH_S)
  private Long nphS;

  public static final String SERIALIZED_NAME_NPH_TOT = "nph_tot";
  @SerializedName(SERIALIZED_NAME_NPH_TOT)
  private Long nphTot;

  public static final String SERIALIZED_NAME_OT = "ot";
  @SerializedName(SERIALIZED_NAME_OT)
  private OffsetDateTime ot;

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private String quality;

  public static final String SERIALIZED_NAME_QUALITY_NUMERIC = "quality_numeric";
  @SerializedName(SERIALIZED_NAME_QUALITY_NUMERIC)
  private Long qualityNumeric;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RMS = "rms";
  @SerializedName(SERIALIZED_NAME_RMS)
  private Double rms;

  public static final String SERIALIZED_NAME_SEC_AZIM_GAP = "sec_azim_gap";
  @SerializedName(SERIALIZED_NAME_SEC_AZIM_GAP)
  private Float secAzimGap;

  public static final String SERIALIZED_NAME_W_RMS = "w_rms";
  @SerializedName(SERIALIZED_NAME_W_RMS)
  private Double wRms;

  public static final String SERIALIZED_NAME_TYPE_ORIGIN = "type_origin";
  @SerializedName(SERIALIZED_NAME_TYPE_ORIGIN)
  private ObjectTypeOrigin typeOrigin;

  public static final String SERIALIZED_NAME_LOCALSPACE = "localspace";
  @SerializedName(SERIALIZED_NAME_LOCALSPACE)
  private ObjectLocalspace localspace;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ObjectProvenance provenance;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private String flags;

  public static final String SERIALIZED_NAME_MAGNITUDES = "magnitudes";
  @SerializedName(SERIALIZED_NAME_MAGNITUDES)
  private List<ObjectMagnitude> magnitudes;

  public static final String SERIALIZED_NAME_ARRIVALS = "arrivals";
  @SerializedName(SERIALIZED_NAME_ARRIVALS)
  private List<ObjectArrival> arrivals;

  public static final String SERIALIZED_NAME_FOCALMECHANISMS = "focalmechanisms";
  @SerializedName(SERIALIZED_NAME_FOCALMECHANISMS)
  private List<ObjectFocalmechanism> focalmechanisms;

  public ObjectOrigin() {
  }

  public ObjectOrigin(
     Long id, 
     OffsetDateTime modified, 
     OffsetDateTime inserted, 
     Double errLatDeg, 
     Double errLonDeg, 
     String flags
  ) {
    this();
    this.id = id;
    this.modified = modified;
    this.inserted = inserted;
    this.errLatDeg = errLatDeg;
    this.errLonDeg = errLonDeg;
    this.flags = flags;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }



   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInserted() {
    return inserted;
  }



  public ObjectOrigin idLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return idLocalspace
  **/
  @javax.annotation.Nullable
  public Long getIdLocalspace() {
    return idLocalspace;
  }

  public void setIdLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
  }


  public ObjectOrigin azimGap(Float azimGap) {
    this.azimGap = azimGap;
    return this;
  }

   /**
   * Azimutal gap | float4
   * @return azimGap
  **/
  @javax.annotation.Nullable
  public Float getAzimGap() {
    return azimGap;
  }

  public void setAzimGap(Float azimGap) {
    this.azimGap = azimGap;
  }


  public ObjectOrigin confidenceLevel(Float confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
    return this;
  }

   /**
   * Integer numer for confidence level type (68.3 1 sigma, xx &#x3D;2 sigma, 99% 3 sigma) | decimal(5.2)
   * @return confidenceLevel
  **/
  @javax.annotation.Nullable
  public Float getConfidenceLevel() {
    return confidenceLevel;
  }

  public void setConfidenceLevel(Float confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
  }


  public ObjectOrigin depth(Double depth) {
    this.depth = depth;
    return this;
  }

   /**
   * Depth in Km | double
   * @return depth
  **/
  @javax.annotation.Nonnull
  public Double getDepth() {
    return depth;
  }

  public void setDepth(Double depth) {
    this.depth = depth;
  }


  public ObjectOrigin e0(Double e0) {
    this.e0 = e0;
    return this;
  }

   /**
   * largest principal error | double
   * @return e0
  **/
  @javax.annotation.Nullable
  public Double getE0() {
    return e0;
  }

  public void setE0(Double e0) {
    this.e0 = e0;
  }


  public ObjectOrigin e0Az(Float e0Az) {
    this.e0Az = e0Az;
    return this;
  }

   /**
   * azimuth of largest principal error | double
   * @return e0Az
  **/
  @javax.annotation.Nullable
  public Float getE0Az() {
    return e0Az;
  }

  public void setE0Az(Float e0Az) {
    this.e0Az = e0Az;
  }


  public ObjectOrigin e0Dip(Double e0Dip) {
    this.e0Dip = e0Dip;
    return this;
  }

   /**
   * dip of largest principal error | double
   * @return e0Dip
  **/
  @javax.annotation.Nullable
  public Double getE0Dip() {
    return e0Dip;
  }

  public void setE0Dip(Double e0Dip) {
    this.e0Dip = e0Dip;
  }


  public ObjectOrigin e1(Double e1) {
    this.e1 = e1;
    return this;
  }

   /**
   * intermed principal error | double
   * @return e1
  **/
  @javax.annotation.Nullable
  public Double getE1() {
    return e1;
  }

  public void setE1(Double e1) {
    this.e1 = e1;
  }


  public ObjectOrigin e1Az(Float e1Az) {
    this.e1Az = e1Az;
    return this;
  }

   /**
   * azimuth of intermediate principal error | double
   * @return e1Az
  **/
  @javax.annotation.Nullable
  public Float getE1Az() {
    return e1Az;
  }

  public void setE1Az(Float e1Az) {
    this.e1Az = e1Az;
  }


  public ObjectOrigin e1Dip(Double e1Dip) {
    this.e1Dip = e1Dip;
    return this;
  }

   /**
   * dip of intermediate principal error | double
   * @return e1Dip
  **/
  @javax.annotation.Nullable
  public Double getE1Dip() {
    return e1Dip;
  }

  public void setE1Dip(Double e1Dip) {
    this.e1Dip = e1Dip;
  }


  public ObjectOrigin e2(Double e2) {
    this.e2 = e2;
    return this;
  }

   /**
   * smallest principal error | double
   * @return e2
  **/
  @javax.annotation.Nullable
  public Double getE2() {
    return e2;
  }

  public void setE2(Double e2) {
    this.e2 = e2;
  }


  public ObjectOrigin e2Az(Float e2Az) {
    this.e2Az = e2Az;
    return this;
  }

   /**
   * azimuth of smallest principal error | double
   * @return e2Az
  **/
  @javax.annotation.Nullable
  public Float getE2Az() {
    return e2Az;
  }

  public void setE2Az(Float e2Az) {
    this.e2Az = e2Az;
  }


  public ObjectOrigin e2Dip(Long e2Dip) {
    this.e2Dip = e2Dip;
    return this;
  }

   /**
   * dip of smallest principal error | double
   * @return e2Dip
  **/
  @javax.annotation.Nullable
  public Long getE2Dip() {
    return e2Dip;
  }

  public void setE2Dip(Long e2Dip) {
    this.e2Dip = e2Dip;
  }


  public ObjectOrigin errDepth(Double errDepth) {
    this.errDepth = errDepth;
    return this;
  }

   /**
   * Depth error | double
   * @return errDepth
  **/
  @javax.annotation.Nullable
  public Double getErrDepth() {
    return errDepth;
  }

  public void setErrDepth(Double errDepth) {
    this.errDepth = errDepth;
  }


  public ObjectOrigin errH(Double errH) {
    this.errH = errH;
    return this;
  }

   /**
   * Horizontal error (km) | double
   * @return errH
  **/
  @javax.annotation.Nullable
  public Double getErrH() {
    return errH;
  }

  public void setErrH(Double errH) {
    this.errH = errH;
  }


  public ObjectOrigin errLat(Double errLat) {
    this.errLat = errLat;
    return this;
  }

   /**
   * Latitude error (km) | double
   * @return errLat
  **/
  @javax.annotation.Nullable
  public Double getErrLat() {
    return errLat;
  }

  public void setErrLat(Double errLat) {
    this.errLat = errLat;
  }


  public ObjectOrigin errLon(Double errLon) {
    this.errLon = errLon;
    return this;
  }

   /**
   * Longitude error (km) | double
   * @return errLon
  **/
  @javax.annotation.Nullable
  public Double getErrLon() {
    return errLon;
  }

  public void setErrLon(Double errLon) {
    this.errLon = errLon;
  }


   /**
   * Latitude error (deg) | double
   * @return errLatDeg
  **/
  @javax.annotation.Nullable
  public Double getErrLatDeg() {
    return errLatDeg;
  }



   /**
   * Longitude error (deg) | double
   * @return errLonDeg
  **/
  @javax.annotation.Nullable
  public Double getErrLonDeg() {
    return errLonDeg;
  }



  public ObjectOrigin errOt(Double errOt) {
    this.errOt = errOt;
    return this;
  }

   /**
   * Origin time error | double
   * @return errOt
  **/
  @javax.annotation.Nullable
  public Double getErrOt() {
    return errOt;
  }

  public void setErrOt(Double errOt) {
    this.errOt = errOt;
  }


  public ObjectOrigin errZ(Double errZ) {
    this.errZ = errZ;
    return this;
  }

   /**
   * Depth error (km) | double
   * @return errZ
  **/
  @javax.annotation.Nullable
  public Double getErrZ() {
    return errZ;
  }

  public void setErrZ(Double errZ) {
    this.errZ = errZ;
  }


  public ObjectOrigin fixDepth(Boolean fixDepth) {
    this.fixDepth = fixDepth;
    return this;
  }

   /**
   * true if depth is fixed | boolean
   * @return fixDepth
  **/
  @javax.annotation.Nullable
  public Boolean getFixDepth() {
    return fixDepth;
  }

  public void setFixDepth(Boolean fixDepth) {
    this.fixDepth = fixDepth;
  }


  public ObjectOrigin isCentroid(Boolean isCentroid) {
    this.isCentroid = isCentroid;
    return this;
  }

   /**
   * true if it is a centroi | boolean
   * @return isCentroid
  **/
  @javax.annotation.Nullable
  public Boolean getIsCentroid() {
    return isCentroid;
  }

  public void setIsCentroid(Boolean isCentroid) {
    this.isCentroid = isCentroid;
  }


  public ObjectOrigin lat(Double lat) {
    this.lat = lat;
    return this;
  }

   /**
   * Latitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.
   * minimum: -90
   * maximum: 90
   * @return lat
  **/
  @javax.annotation.Nonnull
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public ObjectOrigin lon(Double lon) {
    this.lon = lon;
    return this;
  }

   /**
   * Longitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.
   * minimum: -180
   * maximum: 180
   * @return lon
  **/
  @javax.annotation.Nonnull
  public Double getLon() {
    return lon;
  }

  public void setLon(Double lon) {
    this.lon = lon;
  }


  public ObjectOrigin maxDistance(Double maxDistance) {
    this.maxDistance = maxDistance;
    return this;
  }

   /**
   * Distance from the furthest station (km) | double
   * @return maxDistance
  **/
  @javax.annotation.Nullable
  public Double getMaxDistance() {
    return maxDistance;
  }

  public void setMaxDistance(Double maxDistance) {
    this.maxDistance = maxDistance;
  }


  public ObjectOrigin medDistance(Double medDistance) {
    this.medDistance = medDistance;
    return this;
  }

   /**
   * Median distance from the epicenter to the used stations (km) | double
   * @return medDistance
  **/
  @javax.annotation.Nullable
  public Double getMedDistance() {
    return medDistance;
  }

  public void setMedDistance(Double medDistance) {
    this.medDistance = medDistance;
  }


  public ObjectOrigin minDistance(Double minDistance) {
    this.minDistance = minDistance;
    return this;
  }

   /**
   * Distance from the closest station (km) | double
   * @return minDistance
  **/
  @javax.annotation.Nullable
  public Double getMinDistance() {
    return minDistance;
  }

  public void setMinDistance(Double minDistance) {
    this.minDistance = minDistance;
  }


  public ObjectOrigin nph(Long nph) {
    this.nph = nph;
    return this;
  }

   /**
   * # arrivals (P&amp;S) weight &gt;0.1 | int(11)
   * @return nph
  **/
  @javax.annotation.Nullable
  public Long getNph() {
    return nph;
  }

  public void setNph(Long nph) {
    this.nph = nph;
  }


  public ObjectOrigin nphFm(Long nphFm) {
    this.nphFm = nphFm;
    return this;
  }

   /**
   * # P first motions | int(11)
   * @return nphFm
  **/
  @javax.annotation.Nullable
  public Long getNphFm() {
    return nphFm;
  }

  public void setNphFm(Long nphFm) {
    this.nphFm = nphFm;
  }


  public ObjectOrigin nphS(Long nphS) {
    this.nphS = nphS;
    return this;
  }

   /**
   * # S arrivals weight &gt;0.1 | int(11)
   * @return nphS
  **/
  @javax.annotation.Nullable
  public Long getNphS() {
    return nphS;
  }

  public void setNphS(Long nphS) {
    this.nphS = nphS;
  }


  public ObjectOrigin nphTot(Long nphTot) {
    this.nphTot = nphTot;
    return this;
  }

   /**
   * # arrivals (P&amp;S) weight &gt;0.0 | int(11)
   * @return nphTot
  **/
  @javax.annotation.Nullable
  public Long getNphTot() {
    return nphTot;
  }

  public void setNphTot(Long nphTot) {
    this.nphTot = nphTot;
  }


  public ObjectOrigin ot(OffsetDateTime ot) {
    this.ot = ot;
    return this;
  }

   /**
   * Origin time | datetime(3)
   * @return ot
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getOt() {
    return ot;
  }

  public void setOt(OffsetDateTime ot) {
    this.ot = ot;
  }


  public ObjectOrigin quality(String quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Quality of the localization | char(2)
   * @return quality
  **/
  @javax.annotation.Nullable
  public String getQuality() {
    return quality;
  }

  public void setQuality(String quality) {
    this.quality = quality;
  }


  public ObjectOrigin qualityNumeric(Long qualityNumeric) {
    this.qualityNumeric = qualityNumeric;
    return this;
  }

   /**
   * Quality as numeric value | int(10)
   * @return qualityNumeric
  **/
  @javax.annotation.Nullable
  public Long getQualityNumeric() {
    return qualityNumeric;
  }

  public void setQualityNumeric(Long qualityNumeric) {
    this.qualityNumeric = qualityNumeric;
  }


  public ObjectOrigin region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Event location remark region | varchar(255)
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ObjectOrigin rms(Double rms) {
    this.rms = rms;
    return this;
  }

   /**
   * Root mean square | double
   * @return rms
  **/
  @javax.annotation.Nullable
  public Double getRms() {
    return rms;
  }

  public void setRms(Double rms) {
    this.rms = rms;
  }


  public ObjectOrigin secAzimGap(Float secAzimGap) {
    this.secAzimGap = secAzimGap;
    return this;
  }

   /**
   * Secondary Azimutal gap | double
   * @return secAzimGap
  **/
  @javax.annotation.Nullable
  public Float getSecAzimGap() {
    return secAzimGap;
  }

  public void setSecAzimGap(Float secAzimGap) {
    this.secAzimGap = secAzimGap;
  }


  public ObjectOrigin wRms(Double wRms) {
    this.wRms = wRms;
    return this;
  }

   /**
   * Root mean square Weighted | double
   * @return wRms
  **/
  @javax.annotation.Nullable
  public Double getwRms() {
    return wRms;
  }

  public void setwRms(Double wRms) {
    this.wRms = wRms;
  }


  public ObjectOrigin typeOrigin(ObjectTypeOrigin typeOrigin) {
    this.typeOrigin = typeOrigin;
    return this;
  }

   /**
   * Get typeOrigin
   * @return typeOrigin
  **/
  @javax.annotation.Nullable
  public ObjectTypeOrigin getTypeOrigin() {
    return typeOrigin;
  }

  public void setTypeOrigin(ObjectTypeOrigin typeOrigin) {
    this.typeOrigin = typeOrigin;
  }


  public ObjectOrigin localspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
    return this;
  }

   /**
   * Get localspace
   * @return localspace
  **/
  @javax.annotation.Nullable
  public ObjectLocalspace getLocalspace() {
    return localspace;
  }

  public void setLocalspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
  }


  public ObjectOrigin provenance(ObjectProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  public ObjectProvenance getProvenance() {
    return provenance;
  }

  public void setProvenance(ObjectProvenance provenance) {
    this.provenance = provenance;
  }


   /**
   * Flags for origin | varchar(255)
   * @return flags
  **/
  @javax.annotation.Nullable
  public String getFlags() {
    return flags;
  }



  public ObjectOrigin magnitudes(List<ObjectMagnitude> magnitudes) {
    this.magnitudes = magnitudes;
    return this;
  }

  public ObjectOrigin addMagnitudesItem(ObjectMagnitude magnitudesItem) {
    if (this.magnitudes == null) {
      this.magnitudes = new ArrayList<>();
    }
    this.magnitudes.add(magnitudesItem);
    return this;
  }

   /**
   * Get magnitudes
   * @return magnitudes
  **/
  @javax.annotation.Nullable
  public List<ObjectMagnitude> getMagnitudes() {
    return magnitudes;
  }

  public void setMagnitudes(List<ObjectMagnitude> magnitudes) {
    this.magnitudes = magnitudes;
  }


  public ObjectOrigin arrivals(List<ObjectArrival> arrivals) {
    this.arrivals = arrivals;
    return this;
  }

  public ObjectOrigin addArrivalsItem(ObjectArrival arrivalsItem) {
    if (this.arrivals == null) {
      this.arrivals = new ArrayList<>();
    }
    this.arrivals.add(arrivalsItem);
    return this;
  }

   /**
   * Get arrivals
   * @return arrivals
  **/
  @javax.annotation.Nullable
  public List<ObjectArrival> getArrivals() {
    return arrivals;
  }

  public void setArrivals(List<ObjectArrival> arrivals) {
    this.arrivals = arrivals;
  }


  public ObjectOrigin focalmechanisms(List<ObjectFocalmechanism> focalmechanisms) {
    this.focalmechanisms = focalmechanisms;
    return this;
  }

  public ObjectOrigin addFocalmechanismsItem(ObjectFocalmechanism focalmechanismsItem) {
    if (this.focalmechanisms == null) {
      this.focalmechanisms = new ArrayList<>();
    }
    this.focalmechanisms.add(focalmechanismsItem);
    return this;
  }

   /**
   * Get focalmechanisms
   * @return focalmechanisms
  **/
  @javax.annotation.Nullable
  public List<ObjectFocalmechanism> getFocalmechanisms() {
    return focalmechanisms;
  }

  public void setFocalmechanisms(List<ObjectFocalmechanism> focalmechanisms) {
    this.focalmechanisms = focalmechanisms;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObjectOrigin instance itself
   */
  public ObjectOrigin putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectOrigin objectOrigin = (ObjectOrigin) o;
    return Objects.equals(this.id, objectOrigin.id) &&
        Objects.equals(this.modified, objectOrigin.modified) &&
        Objects.equals(this.inserted, objectOrigin.inserted) &&
        Objects.equals(this.idLocalspace, objectOrigin.idLocalspace) &&
        Objects.equals(this.azimGap, objectOrigin.azimGap) &&
        Objects.equals(this.confidenceLevel, objectOrigin.confidenceLevel) &&
        Objects.equals(this.depth, objectOrigin.depth) &&
        Objects.equals(this.e0, objectOrigin.e0) &&
        Objects.equals(this.e0Az, objectOrigin.e0Az) &&
        Objects.equals(this.e0Dip, objectOrigin.e0Dip) &&
        Objects.equals(this.e1, objectOrigin.e1) &&
        Objects.equals(this.e1Az, objectOrigin.e1Az) &&
        Objects.equals(this.e1Dip, objectOrigin.e1Dip) &&
        Objects.equals(this.e2, objectOrigin.e2) &&
        Objects.equals(this.e2Az, objectOrigin.e2Az) &&
        Objects.equals(this.e2Dip, objectOrigin.e2Dip) &&
        Objects.equals(this.errDepth, objectOrigin.errDepth) &&
        Objects.equals(this.errH, objectOrigin.errH) &&
        Objects.equals(this.errLat, objectOrigin.errLat) &&
        Objects.equals(this.errLon, objectOrigin.errLon) &&
        Objects.equals(this.errLatDeg, objectOrigin.errLatDeg) &&
        Objects.equals(this.errLonDeg, objectOrigin.errLonDeg) &&
        Objects.equals(this.errOt, objectOrigin.errOt) &&
        Objects.equals(this.errZ, objectOrigin.errZ) &&
        Objects.equals(this.fixDepth, objectOrigin.fixDepth) &&
        Objects.equals(this.isCentroid, objectOrigin.isCentroid) &&
        Objects.equals(this.lat, objectOrigin.lat) &&
        Objects.equals(this.lon, objectOrigin.lon) &&
        Objects.equals(this.maxDistance, objectOrigin.maxDistance) &&
        Objects.equals(this.medDistance, objectOrigin.medDistance) &&
        Objects.equals(this.minDistance, objectOrigin.minDistance) &&
        Objects.equals(this.nph, objectOrigin.nph) &&
        Objects.equals(this.nphFm, objectOrigin.nphFm) &&
        Objects.equals(this.nphS, objectOrigin.nphS) &&
        Objects.equals(this.nphTot, objectOrigin.nphTot) &&
        Objects.equals(this.ot, objectOrigin.ot) &&
        Objects.equals(this.quality, objectOrigin.quality) &&
        Objects.equals(this.qualityNumeric, objectOrigin.qualityNumeric) &&
        Objects.equals(this.region, objectOrigin.region) &&
        Objects.equals(this.rms, objectOrigin.rms) &&
        Objects.equals(this.secAzimGap, objectOrigin.secAzimGap) &&
        Objects.equals(this.wRms, objectOrigin.wRms) &&
        Objects.equals(this.typeOrigin, objectOrigin.typeOrigin) &&
        Objects.equals(this.localspace, objectOrigin.localspace) &&
        Objects.equals(this.provenance, objectOrigin.provenance) &&
        Objects.equals(this.flags, objectOrigin.flags) &&
        Objects.equals(this.magnitudes, objectOrigin.magnitudes) &&
        Objects.equals(this.arrivals, objectOrigin.arrivals) &&
        Objects.equals(this.focalmechanisms, objectOrigin.focalmechanisms)&&
        Objects.equals(this.additionalProperties, objectOrigin.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, modified, inserted, idLocalspace, azimGap, confidenceLevel, depth, e0, e0Az, e0Dip, e1, e1Az, e1Dip, e2, e2Az, e2Dip, errDepth, errH, errLat, errLon, errLatDeg, errLonDeg, errOt, errZ, fixDepth, isCentroid, lat, lon, maxDistance, medDistance, minDistance, nph, nphFm, nphS, nphTot, ot, quality, qualityNumeric, region, rms, secAzimGap, wRms, typeOrigin, localspace, provenance, flags, magnitudes, arrivals, focalmechanisms, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectOrigin {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    idLocalspace: ").append(toIndentedString(idLocalspace)).append("\n");
    sb.append("    azimGap: ").append(toIndentedString(azimGap)).append("\n");
    sb.append("    confidenceLevel: ").append(toIndentedString(confidenceLevel)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    e0: ").append(toIndentedString(e0)).append("\n");
    sb.append("    e0Az: ").append(toIndentedString(e0Az)).append("\n");
    sb.append("    e0Dip: ").append(toIndentedString(e0Dip)).append("\n");
    sb.append("    e1: ").append(toIndentedString(e1)).append("\n");
    sb.append("    e1Az: ").append(toIndentedString(e1Az)).append("\n");
    sb.append("    e1Dip: ").append(toIndentedString(e1Dip)).append("\n");
    sb.append("    e2: ").append(toIndentedString(e2)).append("\n");
    sb.append("    e2Az: ").append(toIndentedString(e2Az)).append("\n");
    sb.append("    e2Dip: ").append(toIndentedString(e2Dip)).append("\n");
    sb.append("    errDepth: ").append(toIndentedString(errDepth)).append("\n");
    sb.append("    errH: ").append(toIndentedString(errH)).append("\n");
    sb.append("    errLat: ").append(toIndentedString(errLat)).append("\n");
    sb.append("    errLon: ").append(toIndentedString(errLon)).append("\n");
    sb.append("    errLatDeg: ").append(toIndentedString(errLatDeg)).append("\n");
    sb.append("    errLonDeg: ").append(toIndentedString(errLonDeg)).append("\n");
    sb.append("    errOt: ").append(toIndentedString(errOt)).append("\n");
    sb.append("    errZ: ").append(toIndentedString(errZ)).append("\n");
    sb.append("    fixDepth: ").append(toIndentedString(fixDepth)).append("\n");
    sb.append("    isCentroid: ").append(toIndentedString(isCentroid)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    maxDistance: ").append(toIndentedString(maxDistance)).append("\n");
    sb.append("    medDistance: ").append(toIndentedString(medDistance)).append("\n");
    sb.append("    minDistance: ").append(toIndentedString(minDistance)).append("\n");
    sb.append("    nph: ").append(toIndentedString(nph)).append("\n");
    sb.append("    nphFm: ").append(toIndentedString(nphFm)).append("\n");
    sb.append("    nphS: ").append(toIndentedString(nphS)).append("\n");
    sb.append("    nphTot: ").append(toIndentedString(nphTot)).append("\n");
    sb.append("    ot: ").append(toIndentedString(ot)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    qualityNumeric: ").append(toIndentedString(qualityNumeric)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    rms: ").append(toIndentedString(rms)).append("\n");
    sb.append("    secAzimGap: ").append(toIndentedString(secAzimGap)).append("\n");
    sb.append("    wRms: ").append(toIndentedString(wRms)).append("\n");
    sb.append("    typeOrigin: ").append(toIndentedString(typeOrigin)).append("\n");
    sb.append("    localspace: ").append(toIndentedString(localspace)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    magnitudes: ").append(toIndentedString(magnitudes)).append("\n");
    sb.append("    arrivals: ").append(toIndentedString(arrivals)).append("\n");
    sb.append("    focalmechanisms: ").append(toIndentedString(focalmechanisms)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("id_localspace");
    openapiFields.add("azim_gap");
    openapiFields.add("confidence_level");
    openapiFields.add("depth");
    openapiFields.add("e0");
    openapiFields.add("e0_az");
    openapiFields.add("e0_dip");
    openapiFields.add("e1");
    openapiFields.add("e1_az");
    openapiFields.add("e1_dip");
    openapiFields.add("e2");
    openapiFields.add("e2_az");
    openapiFields.add("e2_dip");
    openapiFields.add("err_depth");
    openapiFields.add("err_h");
    openapiFields.add("err_lat");
    openapiFields.add("err_lon");
    openapiFields.add("err_lat_deg");
    openapiFields.add("err_lon_deg");
    openapiFields.add("err_ot");
    openapiFields.add("err_z");
    openapiFields.add("fix_depth");
    openapiFields.add("is_centroid");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("max_distance");
    openapiFields.add("med_distance");
    openapiFields.add("min_distance");
    openapiFields.add("nph");
    openapiFields.add("nph_fm");
    openapiFields.add("nph_s");
    openapiFields.add("nph_tot");
    openapiFields.add("ot");
    openapiFields.add("quality");
    openapiFields.add("quality_numeric");
    openapiFields.add("region");
    openapiFields.add("rms");
    openapiFields.add("sec_azim_gap");
    openapiFields.add("w_rms");
    openapiFields.add("type_origin");
    openapiFields.add("localspace");
    openapiFields.add("provenance");
    openapiFields.add("flags");
    openapiFields.add("magnitudes");
    openapiFields.add("arrivals");
    openapiFields.add("focalmechanisms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("depth");
    openapiRequiredFields.add("lat");
    openapiRequiredFields.add("lon");
    openapiRequiredFields.add("ot");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectOrigin
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectOrigin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectOrigin is not found in the empty JSON string", ObjectOrigin.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjectOrigin.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) && !jsonObj.get("quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // validate the optional field `type_origin`
      if (jsonObj.get("type_origin") != null && !jsonObj.get("type_origin").isJsonNull()) {
        ObjectTypeOrigin.validateJsonElement(jsonObj.get("type_origin"));
      }
      // validate the optional field `localspace`
      if (jsonObj.get("localspace") != null && !jsonObj.get("localspace").isJsonNull()) {
        ObjectLocalspace.validateJsonElement(jsonObj.get("localspace"));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ObjectProvenance.validateJsonElement(jsonObj.get("provenance"));
      }
      if ((jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) && !jsonObj.get("flags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if (jsonObj.get("magnitudes") != null && !jsonObj.get("magnitudes").isJsonNull()) {
        JsonArray jsonArraymagnitudes = jsonObj.getAsJsonArray("magnitudes");
        if (jsonArraymagnitudes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("magnitudes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `magnitudes` to be an array in the JSON string but got `%s`", jsonObj.get("magnitudes").toString()));
          }

          // validate the optional field `magnitudes` (array)
          for (int i = 0; i < jsonArraymagnitudes.size(); i++) {
            ObjectMagnitude.validateJsonElement(jsonArraymagnitudes.get(i));
          };
        }
      }
      if (jsonObj.get("arrivals") != null && !jsonObj.get("arrivals").isJsonNull()) {
        JsonArray jsonArrayarrivals = jsonObj.getAsJsonArray("arrivals");
        if (jsonArrayarrivals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("arrivals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `arrivals` to be an array in the JSON string but got `%s`", jsonObj.get("arrivals").toString()));
          }

          // validate the optional field `arrivals` (array)
          for (int i = 0; i < jsonArrayarrivals.size(); i++) {
            ObjectArrival.validateJsonElement(jsonArrayarrivals.get(i));
          };
        }
      }
      if (jsonObj.get("focalmechanisms") != null && !jsonObj.get("focalmechanisms").isJsonNull()) {
        JsonArray jsonArrayfocalmechanisms = jsonObj.getAsJsonArray("focalmechanisms");
        if (jsonArrayfocalmechanisms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("focalmechanisms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `focalmechanisms` to be an array in the JSON string but got `%s`", jsonObj.get("focalmechanisms").toString()));
          }

          // validate the optional field `focalmechanisms` (array)
          for (int i = 0; i < jsonArrayfocalmechanisms.size(); i++) {
            ObjectFocalmechanism.validateJsonElement(jsonArrayfocalmechanisms.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectOrigin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectOrigin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectOrigin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectOrigin.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectOrigin>() {
           @Override
           public void write(JsonWriter out, ObjectOrigin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectOrigin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ObjectOrigin instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectOrigin given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectOrigin
  * @throws IOException if the JSON string is invalid with respect to ObjectOrigin
  */
  public static ObjectOrigin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectOrigin.class);
  }

 /**
  * Convert an instance of ObjectOrigin to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

