/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.ingv.dante.model.ObjectLocalspaceForVw;
import org.ingv.dante.model.ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup;
import org.ingv.dante.model.ObjectTypeOrigin;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectOriginForMagnitudesOriginsEventsAndEventsGroup
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class ObjectOriginForMagnitudesOriginsEventsAndEventsGroup {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ID_LOCALSPACE = "id_localspace";
  @SerializedName(SERIALIZED_NAME_ID_LOCALSPACE)
  private Long idLocalspace;

  public static final String SERIALIZED_NAME_OT = "ot";
  @SerializedName(SERIALIZED_NAME_OT)
  private OffsetDateTime ot;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private Double lon;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  private Double depth;

  public static final String SERIALIZED_NAME_ERR_OT = "err_ot";
  @SerializedName(SERIALIZED_NAME_ERR_OT)
  private Double errOt;

  public static final String SERIALIZED_NAME_ERR_H = "err_h";
  @SerializedName(SERIALIZED_NAME_ERR_H)
  private Double errH;

  public static final String SERIALIZED_NAME_ERR_Z = "err_z";
  @SerializedName(SERIALIZED_NAME_ERR_Z)
  private Double errZ;

  public static final String SERIALIZED_NAME_ERR_LAT = "err_lat";
  @SerializedName(SERIALIZED_NAME_ERR_LAT)
  private Double errLat;

  public static final String SERIALIZED_NAME_ERR_LON = "err_lon";
  @SerializedName(SERIALIZED_NAME_ERR_LON)
  private Double errLon;

  public static final String SERIALIZED_NAME_MIN_DISTANCE = "min_distance";
  @SerializedName(SERIALIZED_NAME_MIN_DISTANCE)
  private Double minDistance;

  public static final String SERIALIZED_NAME_NPH_TOT = "nph_tot";
  @SerializedName(SERIALIZED_NAME_NPH_TOT)
  private Long nphTot;

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private String quality;

  public static final String SERIALIZED_NAME_ASSOCIATED_PHASE_COUNT = "associatedPhaseCount";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_PHASE_COUNT)
  private Long associatedPhaseCount;

  public static final String SERIALIZED_NAME_ASSOCIATED_STATION_COUNT = "associatedStationCount";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_STATION_COUNT)
  private Long associatedStationCount;

  public static final String SERIALIZED_NAME_USED_PHASE_COUNT = "usedPhaseCount";
  @SerializedName(SERIALIZED_NAME_USED_PHASE_COUNT)
  private Long usedPhaseCount;

  public static final String SERIALIZED_NAME_USED_STATION_COUNT = "usedStationCount";
  @SerializedName(SERIALIZED_NAME_USED_STATION_COUNT)
  private Long usedStationCount;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_TYPE_ORIGIN = "type_origin";
  @SerializedName(SERIALIZED_NAME_TYPE_ORIGIN)
  private ObjectTypeOrigin typeOrigin;

  public static final String SERIALIZED_NAME_LOCALSPACE = "localspace";
  @SerializedName(SERIALIZED_NAME_LOCALSPACE)
  private ObjectLocalspaceForVw localspace;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup provenance;

  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup() {
  }

  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup(
     OffsetDateTime modified, 
     OffsetDateTime inserted
  ) {
    this();
    this.modified = modified;
    this.inserted = inserted;
  }

  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup idLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return idLocalspace
  **/
  @javax.annotation.Nullable
  public Long getIdLocalspace() {
    return idLocalspace;
  }

  public void setIdLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup ot(OffsetDateTime ot) {
    this.ot = ot;
    return this;
  }

   /**
   * Origin time | datetime(3)
   * @return ot
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getOt() {
    return ot;
  }

  public void setOt(OffsetDateTime ot) {
    this.ot = ot;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup lat(Double lat) {
    this.lat = lat;
    return this;
  }

   /**
   * Latitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.
   * minimum: -90
   * maximum: 90
   * @return lat
  **/
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup lon(Double lon) {
    this.lon = lon;
    return this;
  }

   /**
   * Longitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.
   * minimum: -180
   * maximum: 180
   * @return lon
  **/
  @javax.annotation.Nullable
  public Double getLon() {
    return lon;
  }

  public void setLon(Double lon) {
    this.lon = lon;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup depth(Double depth) {
    this.depth = depth;
    return this;
  }

   /**
   * Depth in Km | double
   * @return depth
  **/
  @javax.annotation.Nullable
  public Double getDepth() {
    return depth;
  }

  public void setDepth(Double depth) {
    this.depth = depth;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup errOt(Double errOt) {
    this.errOt = errOt;
    return this;
  }

   /**
   * Origin time error | double
   * @return errOt
  **/
  @javax.annotation.Nullable
  public Double getErrOt() {
    return errOt;
  }

  public void setErrOt(Double errOt) {
    this.errOt = errOt;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup errH(Double errH) {
    this.errH = errH;
    return this;
  }

   /**
   * Horizontal error (km) | double
   * @return errH
  **/
  @javax.annotation.Nullable
  public Double getErrH() {
    return errH;
  }

  public void setErrH(Double errH) {
    this.errH = errH;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup errZ(Double errZ) {
    this.errZ = errZ;
    return this;
  }

   /**
   * Depth error (km) | double
   * @return errZ
  **/
  @javax.annotation.Nullable
  public Double getErrZ() {
    return errZ;
  }

  public void setErrZ(Double errZ) {
    this.errZ = errZ;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup errLat(Double errLat) {
    this.errLat = errLat;
    return this;
  }

   /**
   * Latitude error (km) | double
   * @return errLat
  **/
  @javax.annotation.Nullable
  public Double getErrLat() {
    return errLat;
  }

  public void setErrLat(Double errLat) {
    this.errLat = errLat;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup errLon(Double errLon) {
    this.errLon = errLon;
    return this;
  }

   /**
   * Longitude error (km) | double
   * @return errLon
  **/
  @javax.annotation.Nullable
  public Double getErrLon() {
    return errLon;
  }

  public void setErrLon(Double errLon) {
    this.errLon = errLon;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup minDistance(Double minDistance) {
    this.minDistance = minDistance;
    return this;
  }

   /**
   * Distance from the closest station (km) | double
   * @return minDistance
  **/
  @javax.annotation.Nullable
  public Double getMinDistance() {
    return minDistance;
  }

  public void setMinDistance(Double minDistance) {
    this.minDistance = minDistance;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup nphTot(Long nphTot) {
    this.nphTot = nphTot;
    return this;
  }

   /**
   * # arrivals (P&amp;S) weight &gt;0.0 | int(11)
   * @return nphTot
  **/
  @javax.annotation.Nullable
  public Long getNphTot() {
    return nphTot;
  }

  public void setNphTot(Long nphTot) {
    this.nphTot = nphTot;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup quality(String quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Quality of the localization | char(2)
   * @return quality
  **/
  @javax.annotation.Nullable
  public String getQuality() {
    return quality;
  }

  public void setQuality(String quality) {
    this.quality = quality;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup associatedPhaseCount(Long associatedPhaseCount) {
    this.associatedPhaseCount = associatedPhaseCount;
    return this;
  }

   /**
   * Number of associated phases, regardless of their use for origin computation | int(8)&#39;
   * @return associatedPhaseCount
  **/
  @javax.annotation.Nullable
  public Long getAssociatedPhaseCount() {
    return associatedPhaseCount;
  }

  public void setAssociatedPhaseCount(Long associatedPhaseCount) {
    this.associatedPhaseCount = associatedPhaseCount;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup associatedStationCount(Long associatedStationCount) {
    this.associatedStationCount = associatedStationCount;
    return this;
  }

   /**
   * Number of stations at which the event was observed | int(8)&#39;
   * @return associatedStationCount
  **/
  @javax.annotation.Nullable
  public Long getAssociatedStationCount() {
    return associatedStationCount;
  }

  public void setAssociatedStationCount(Long associatedStationCount) {
    this.associatedStationCount = associatedStationCount;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup usedPhaseCount(Long usedPhaseCount) {
    this.usedPhaseCount = usedPhaseCount;
    return this;
  }

   /**
   * Number of defining phases, i.e., phase observations that were actually used for computing the origin | int(8)&#39;
   * @return usedPhaseCount
  **/
  @javax.annotation.Nullable
  public Long getUsedPhaseCount() {
    return usedPhaseCount;
  }

  public void setUsedPhaseCount(Long usedPhaseCount) {
    this.usedPhaseCount = usedPhaseCount;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup usedStationCount(Long usedStationCount) {
    this.usedStationCount = usedStationCount;
    return this;
  }

   /**
   * Number of stations from which data was used for origin computation | int(8)&#39;
   * @return usedStationCount
  **/
  @javax.annotation.Nullable
  public Long getUsedStationCount() {
    return usedStationCount;
  }

  public void setUsedStationCount(Long usedStationCount) {
    this.usedStationCount = usedStationCount;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Event location remark region | varchar(255)
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }



   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInserted() {
    return inserted;
  }



  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup typeOrigin(ObjectTypeOrigin typeOrigin) {
    this.typeOrigin = typeOrigin;
    return this;
  }

   /**
   * Get typeOrigin
   * @return typeOrigin
  **/
  @javax.annotation.Nullable
  public ObjectTypeOrigin getTypeOrigin() {
    return typeOrigin;
  }

  public void setTypeOrigin(ObjectTypeOrigin typeOrigin) {
    this.typeOrigin = typeOrigin;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup localspace(ObjectLocalspaceForVw localspace) {
    this.localspace = localspace;
    return this;
  }

   /**
   * Get localspace
   * @return localspace
  **/
  @javax.annotation.Nullable
  public ObjectLocalspaceForVw getLocalspace() {
    return localspace;
  }

  public void setLocalspace(ObjectLocalspaceForVw localspace) {
    this.localspace = localspace;
  }


  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup provenance(ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  public ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup getProvenance() {
    return provenance;
  }

  public void setProvenance(ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup provenance) {
    this.provenance = provenance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObjectOriginForMagnitudesOriginsEventsAndEventsGroup instance itself
   */
  public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectOriginForMagnitudesOriginsEventsAndEventsGroup objectOriginForMagnitudesOriginsEventsAndEventsGroup = (ObjectOriginForMagnitudesOriginsEventsAndEventsGroup) o;
    return Objects.equals(this.id, objectOriginForMagnitudesOriginsEventsAndEventsGroup.id) &&
        Objects.equals(this.idLocalspace, objectOriginForMagnitudesOriginsEventsAndEventsGroup.idLocalspace) &&
        Objects.equals(this.ot, objectOriginForMagnitudesOriginsEventsAndEventsGroup.ot) &&
        Objects.equals(this.lat, objectOriginForMagnitudesOriginsEventsAndEventsGroup.lat) &&
        Objects.equals(this.lon, objectOriginForMagnitudesOriginsEventsAndEventsGroup.lon) &&
        Objects.equals(this.depth, objectOriginForMagnitudesOriginsEventsAndEventsGroup.depth) &&
        Objects.equals(this.errOt, objectOriginForMagnitudesOriginsEventsAndEventsGroup.errOt) &&
        Objects.equals(this.errH, objectOriginForMagnitudesOriginsEventsAndEventsGroup.errH) &&
        Objects.equals(this.errZ, objectOriginForMagnitudesOriginsEventsAndEventsGroup.errZ) &&
        Objects.equals(this.errLat, objectOriginForMagnitudesOriginsEventsAndEventsGroup.errLat) &&
        Objects.equals(this.errLon, objectOriginForMagnitudesOriginsEventsAndEventsGroup.errLon) &&
        Objects.equals(this.minDistance, objectOriginForMagnitudesOriginsEventsAndEventsGroup.minDistance) &&
        Objects.equals(this.nphTot, objectOriginForMagnitudesOriginsEventsAndEventsGroup.nphTot) &&
        Objects.equals(this.quality, objectOriginForMagnitudesOriginsEventsAndEventsGroup.quality) &&
        Objects.equals(this.associatedPhaseCount, objectOriginForMagnitudesOriginsEventsAndEventsGroup.associatedPhaseCount) &&
        Objects.equals(this.associatedStationCount, objectOriginForMagnitudesOriginsEventsAndEventsGroup.associatedStationCount) &&
        Objects.equals(this.usedPhaseCount, objectOriginForMagnitudesOriginsEventsAndEventsGroup.usedPhaseCount) &&
        Objects.equals(this.usedStationCount, objectOriginForMagnitudesOriginsEventsAndEventsGroup.usedStationCount) &&
        Objects.equals(this.region, objectOriginForMagnitudesOriginsEventsAndEventsGroup.region) &&
        Objects.equals(this.modified, objectOriginForMagnitudesOriginsEventsAndEventsGroup.modified) &&
        Objects.equals(this.inserted, objectOriginForMagnitudesOriginsEventsAndEventsGroup.inserted) &&
        Objects.equals(this.typeOrigin, objectOriginForMagnitudesOriginsEventsAndEventsGroup.typeOrigin) &&
        Objects.equals(this.localspace, objectOriginForMagnitudesOriginsEventsAndEventsGroup.localspace) &&
        Objects.equals(this.provenance, objectOriginForMagnitudesOriginsEventsAndEventsGroup.provenance)&&
        Objects.equals(this.additionalProperties, objectOriginForMagnitudesOriginsEventsAndEventsGroup.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, idLocalspace, ot, lat, lon, depth, errOt, errH, errZ, errLat, errLon, minDistance, nphTot, quality, associatedPhaseCount, associatedStationCount, usedPhaseCount, usedStationCount, region, modified, inserted, typeOrigin, localspace, provenance, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectOriginForMagnitudesOriginsEventsAndEventsGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idLocalspace: ").append(toIndentedString(idLocalspace)).append("\n");
    sb.append("    ot: ").append(toIndentedString(ot)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    errOt: ").append(toIndentedString(errOt)).append("\n");
    sb.append("    errH: ").append(toIndentedString(errH)).append("\n");
    sb.append("    errZ: ").append(toIndentedString(errZ)).append("\n");
    sb.append("    errLat: ").append(toIndentedString(errLat)).append("\n");
    sb.append("    errLon: ").append(toIndentedString(errLon)).append("\n");
    sb.append("    minDistance: ").append(toIndentedString(minDistance)).append("\n");
    sb.append("    nphTot: ").append(toIndentedString(nphTot)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    associatedPhaseCount: ").append(toIndentedString(associatedPhaseCount)).append("\n");
    sb.append("    associatedStationCount: ").append(toIndentedString(associatedStationCount)).append("\n");
    sb.append("    usedPhaseCount: ").append(toIndentedString(usedPhaseCount)).append("\n");
    sb.append("    usedStationCount: ").append(toIndentedString(usedStationCount)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    typeOrigin: ").append(toIndentedString(typeOrigin)).append("\n");
    sb.append("    localspace: ").append(toIndentedString(localspace)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("id_localspace");
    openapiFields.add("ot");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("depth");
    openapiFields.add("err_ot");
    openapiFields.add("err_h");
    openapiFields.add("err_z");
    openapiFields.add("err_lat");
    openapiFields.add("err_lon");
    openapiFields.add("min_distance");
    openapiFields.add("nph_tot");
    openapiFields.add("quality");
    openapiFields.add("associatedPhaseCount");
    openapiFields.add("associatedStationCount");
    openapiFields.add("usedPhaseCount");
    openapiFields.add("usedStationCount");
    openapiFields.add("region");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("type_origin");
    openapiFields.add("localspace");
    openapiFields.add("provenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectOriginForMagnitudesOriginsEventsAndEventsGroup
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectOriginForMagnitudesOriginsEventsAndEventsGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectOriginForMagnitudesOriginsEventsAndEventsGroup is not found in the empty JSON string", ObjectOriginForMagnitudesOriginsEventsAndEventsGroup.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) && !jsonObj.get("quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // validate the optional field `type_origin`
      if (jsonObj.get("type_origin") != null && !jsonObj.get("type_origin").isJsonNull()) {
        ObjectTypeOrigin.validateJsonElement(jsonObj.get("type_origin"));
      }
      // validate the optional field `localspace`
      if (jsonObj.get("localspace") != null && !jsonObj.get("localspace").isJsonNull()) {
        ObjectLocalspaceForVw.validateJsonElement(jsonObj.get("localspace"));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup.validateJsonElement(jsonObj.get("provenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectOriginForMagnitudesOriginsEventsAndEventsGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectOriginForMagnitudesOriginsEventsAndEventsGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectOriginForMagnitudesOriginsEventsAndEventsGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectOriginForMagnitudesOriginsEventsAndEventsGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectOriginForMagnitudesOriginsEventsAndEventsGroup>() {
           @Override
           public void write(JsonWriter out, ObjectOriginForMagnitudesOriginsEventsAndEventsGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectOriginForMagnitudesOriginsEventsAndEventsGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ObjectOriginForMagnitudesOriginsEventsAndEventsGroup instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectOriginForMagnitudesOriginsEventsAndEventsGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectOriginForMagnitudesOriginsEventsAndEventsGroup
  * @throws IOException if the JSON string is invalid with respect to ObjectOriginForMagnitudesOriginsEventsAndEventsGroup
  */
  public static ObjectOriginForMagnitudesOriginsEventsAndEventsGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectOriginForMagnitudesOriginsEventsAndEventsGroup.class);
  }

 /**
  * Convert an instance of ObjectOriginForMagnitudesOriginsEventsAndEventsGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

