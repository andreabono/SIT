/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectPickEw;
import org.ingv.dante.model.ObjectProvenance;
import org.ingv.dante.model.PickEmersio;
import org.ingv.dante.model.PickFirstmotion;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectPick
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class ObjectPick {
  public static final String SERIALIZED_NAME_NET = "net";
  @SerializedName(SERIALIZED_NAME_NET)
  private String net;

  public static final String SERIALIZED_NAME_STA = "sta";
  @SerializedName(SERIALIZED_NAME_STA)
  private String sta;

  public static final String SERIALIZED_NAME_CHA = "cha";
  @SerializedName(SERIALIZED_NAME_CHA)
  private String cha;

  public static final String SERIALIZED_NAME_LOC = "loc";
  @SerializedName(SERIALIZED_NAME_LOC)
  private String loc = "--";

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_ID_LOCALSPACE = "id_localspace";
  @SerializedName(SERIALIZED_NAME_ID_LOCALSPACE)
  private Long idLocalspace;

  public static final String SERIALIZED_NAME_QUALITY_CLASS = "quality_class";
  @SerializedName(SERIALIZED_NAME_QUALITY_CLASS)
  private Integer qualityClass;

  public static final String SERIALIZED_NAME_LOWER_UNCERTAINTY = "lower_uncertainty";
  @SerializedName(SERIALIZED_NAME_LOWER_UNCERTAINTY)
  private Float lowerUncertainty;

  public static final String SERIALIZED_NAME_UPPER_UNCERTAINTY = "upper_uncertainty";
  @SerializedName(SERIALIZED_NAME_UPPER_UNCERTAINTY)
  private Float upperUncertainty;

  public static final String SERIALIZED_NAME_CONFIDENCE_LEVEL = "confidence_level";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_LEVEL)
  private Float confidenceLevel = 68.3f;

  public static final String SERIALIZED_NAME_ARRIVAL_TIME = "arrival_time";
  @SerializedName(SERIALIZED_NAME_ARRIVAL_TIME)
  private OffsetDateTime arrivalTime;

  public static final String SERIALIZED_NAME_FIRSTMOTION = "firstmotion";
  @SerializedName(SERIALIZED_NAME_FIRSTMOTION)
  private PickFirstmotion firstmotion;

  public static final String SERIALIZED_NAME_EMERSIO = "emersio";
  @SerializedName(SERIALIZED_NAME_EMERSIO)
  private PickEmersio emersio;

  public static final String SERIALIZED_NAME_PICK_EW = "pick_ew";
  @SerializedName(SERIALIZED_NAME_PICK_EW)
  private ObjectPickEw pickEw;

  public static final String SERIALIZED_NAME_LOCALSPACE = "localspace";
  @SerializedName(SERIALIZED_NAME_LOCALSPACE)
  private ObjectLocalspace localspace;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ObjectProvenance provenance;

  public ObjectPick() {
  }

  public ObjectPick(
     Long id, 
     OffsetDateTime modified, 
     OffsetDateTime inserted
  ) {
    this();
    this.id = id;
    this.modified = modified;
    this.inserted = inserted;
  }

  public ObjectPick net(String net) {
    this.net = net;
    return this;
  }

   /**
   * Channel net code | char(2)
   * @return net
  **/
  @javax.annotation.Nonnull
  public String getNet() {
    return net;
  }

  public void setNet(String net) {
    this.net = net;
  }


  public ObjectPick sta(String sta) {
    this.sta = sta;
    return this;
  }

   /**
   * Channel station code | varchar(5)
   * @return sta
  **/
  @javax.annotation.Nonnull
  public String getSta() {
    return sta;
  }

  public void setSta(String sta) {
    this.sta = sta;
  }


  public ObjectPick cha(String cha) {
    this.cha = cha;
    return this;
  }

   /**
   * Channel code | char(3)
   * @return cha
  **/
  @javax.annotation.Nonnull
  public String getCha() {
    return cha;
  }

  public void setCha(String cha) {
    this.cha = cha;
  }


  public ObjectPick loc(String loc) {
    this.loc = loc;
    return this;
  }

   /**
   * Channel location | char(2)
   * @return loc
  **/
  @javax.annotation.Nullable
  public String getLoc() {
    return loc;
  }

  public void setLoc(String loc) {
    this.loc = loc;
  }


   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }



   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInserted() {
    return inserted;
  }



  public ObjectPick idLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return idLocalspace
  **/
  @javax.annotation.Nullable
  public Long getIdLocalspace() {
    return idLocalspace;
  }

  public void setIdLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
  }


  public ObjectPick qualityClass(Integer qualityClass) {
    this.qualityClass = qualityClass;
    return this;
  }

   /**
   * Pick quality class | bigint
   * @return qualityClass
  **/
  @javax.annotation.Nullable
  public Integer getQualityClass() {
    return qualityClass;
  }

  public void setQualityClass(Integer qualityClass) {
    this.qualityClass = qualityClass;
  }


  public ObjectPick lowerUncertainty(Float lowerUncertainty) {
    this.lowerUncertainty = lowerUncertainty;
    return this;
  }

   /**
   * Uncertainty as the absolute value of deviation from the mainvalue towards smaller values. | decimal(8,3)
   * @return lowerUncertainty
  **/
  @javax.annotation.Nullable
  public Float getLowerUncertainty() {
    return lowerUncertainty;
  }

  public void setLowerUncertainty(Float lowerUncertainty) {
    this.lowerUncertainty = lowerUncertainty;
  }


  public ObjectPick upperUncertainty(Float upperUncertainty) {
    this.upperUncertainty = upperUncertainty;
    return this;
  }

   /**
   * Uncertainty as the absolute value of deviation from the mainvalue towards larger values. | decimal(8,3)
   * @return upperUncertainty
  **/
  @javax.annotation.Nullable
  public Float getUpperUncertainty() {
    return upperUncertainty;
  }

  public void setUpperUncertainty(Float upperUncertainty) {
    this.upperUncertainty = upperUncertainty;
  }


  public ObjectPick confidenceLevel(Float confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
    return this;
  }

   /**
   * Integer numer for confidence level type (68.3 1 sigma, xx &#x3D;2 sigma, 99% 3 sigma) | decimal(5.2)
   * @return confidenceLevel
  **/
  @javax.annotation.Nullable
  public Float getConfidenceLevel() {
    return confidenceLevel;
  }

  public void setConfidenceLevel(Float confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
  }


  public ObjectPick arrivalTime(OffsetDateTime arrivalTime) {
    this.arrivalTime = arrivalTime;
    return this;
  }

   /**
   * Arrival time with microseconds | datetime(3)
   * @return arrivalTime
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getArrivalTime() {
    return arrivalTime;
  }

  public void setArrivalTime(OffsetDateTime arrivalTime) {
    this.arrivalTime = arrivalTime;
  }


  public ObjectPick firstmotion(PickFirstmotion firstmotion) {
    this.firstmotion = firstmotion;
    return this;
  }

   /**
   * Get firstmotion
   * @return firstmotion
  **/
  @javax.annotation.Nullable
  public PickFirstmotion getFirstmotion() {
    return firstmotion;
  }

  public void setFirstmotion(PickFirstmotion firstmotion) {
    this.firstmotion = firstmotion;
  }


  public ObjectPick emersio(PickEmersio emersio) {
    this.emersio = emersio;
    return this;
  }

   /**
   * Get emersio
   * @return emersio
  **/
  @javax.annotation.Nullable
  public PickEmersio getEmersio() {
    return emersio;
  }

  public void setEmersio(PickEmersio emersio) {
    this.emersio = emersio;
  }


  public ObjectPick pickEw(ObjectPickEw pickEw) {
    this.pickEw = pickEw;
    return this;
  }

   /**
   * Get pickEw
   * @return pickEw
  **/
  @javax.annotation.Nullable
  public ObjectPickEw getPickEw() {
    return pickEw;
  }

  public void setPickEw(ObjectPickEw pickEw) {
    this.pickEw = pickEw;
  }


  public ObjectPick localspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
    return this;
  }

   /**
   * Get localspace
   * @return localspace
  **/
  @javax.annotation.Nullable
  public ObjectLocalspace getLocalspace() {
    return localspace;
  }

  public void setLocalspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
  }


  public ObjectPick provenance(ObjectProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  public ObjectProvenance getProvenance() {
    return provenance;
  }

  public void setProvenance(ObjectProvenance provenance) {
    this.provenance = provenance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObjectPick instance itself
   */
  public ObjectPick putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectPick objectPick = (ObjectPick) o;
    return Objects.equals(this.net, objectPick.net) &&
        Objects.equals(this.sta, objectPick.sta) &&
        Objects.equals(this.cha, objectPick.cha) &&
        Objects.equals(this.loc, objectPick.loc) &&
        Objects.equals(this.id, objectPick.id) &&
        Objects.equals(this.modified, objectPick.modified) &&
        Objects.equals(this.inserted, objectPick.inserted) &&
        Objects.equals(this.idLocalspace, objectPick.idLocalspace) &&
        Objects.equals(this.qualityClass, objectPick.qualityClass) &&
        Objects.equals(this.lowerUncertainty, objectPick.lowerUncertainty) &&
        Objects.equals(this.upperUncertainty, objectPick.upperUncertainty) &&
        Objects.equals(this.confidenceLevel, objectPick.confidenceLevel) &&
        Objects.equals(this.arrivalTime, objectPick.arrivalTime) &&
        Objects.equals(this.firstmotion, objectPick.firstmotion) &&
        Objects.equals(this.emersio, objectPick.emersio) &&
        Objects.equals(this.pickEw, objectPick.pickEw) &&
        Objects.equals(this.localspace, objectPick.localspace) &&
        Objects.equals(this.provenance, objectPick.provenance)&&
        Objects.equals(this.additionalProperties, objectPick.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(net, sta, cha, loc, id, modified, inserted, idLocalspace, qualityClass, lowerUncertainty, upperUncertainty, confidenceLevel, arrivalTime, firstmotion, emersio, pickEw, localspace, provenance, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectPick {\n");
    sb.append("    net: ").append(toIndentedString(net)).append("\n");
    sb.append("    sta: ").append(toIndentedString(sta)).append("\n");
    sb.append("    cha: ").append(toIndentedString(cha)).append("\n");
    sb.append("    loc: ").append(toIndentedString(loc)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    idLocalspace: ").append(toIndentedString(idLocalspace)).append("\n");
    sb.append("    qualityClass: ").append(toIndentedString(qualityClass)).append("\n");
    sb.append("    lowerUncertainty: ").append(toIndentedString(lowerUncertainty)).append("\n");
    sb.append("    upperUncertainty: ").append(toIndentedString(upperUncertainty)).append("\n");
    sb.append("    confidenceLevel: ").append(toIndentedString(confidenceLevel)).append("\n");
    sb.append("    arrivalTime: ").append(toIndentedString(arrivalTime)).append("\n");
    sb.append("    firstmotion: ").append(toIndentedString(firstmotion)).append("\n");
    sb.append("    emersio: ").append(toIndentedString(emersio)).append("\n");
    sb.append("    pickEw: ").append(toIndentedString(pickEw)).append("\n");
    sb.append("    localspace: ").append(toIndentedString(localspace)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("net");
    openapiFields.add("sta");
    openapiFields.add("cha");
    openapiFields.add("loc");
    openapiFields.add("id");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("id_localspace");
    openapiFields.add("quality_class");
    openapiFields.add("lower_uncertainty");
    openapiFields.add("upper_uncertainty");
    openapiFields.add("confidence_level");
    openapiFields.add("arrival_time");
    openapiFields.add("firstmotion");
    openapiFields.add("emersio");
    openapiFields.add("pick_ew");
    openapiFields.add("localspace");
    openapiFields.add("provenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("net");
    openapiRequiredFields.add("sta");
    openapiRequiredFields.add("cha");
    openapiRequiredFields.add("arrival_time");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectPick
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectPick.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectPick is not found in the empty JSON string", ObjectPick.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjectPick.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("net").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net").toString()));
      }
      if (!jsonObj.get("sta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sta").toString()));
      }
      if (!jsonObj.get("cha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cha").toString()));
      }
      if ((jsonObj.get("loc") != null && !jsonObj.get("loc").isJsonNull()) && !jsonObj.get("loc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loc").toString()));
      }
      // validate the optional field `firstmotion`
      if (jsonObj.get("firstmotion") != null && !jsonObj.get("firstmotion").isJsonNull()) {
        PickFirstmotion.validateJsonElement(jsonObj.get("firstmotion"));
      }
      // validate the optional field `emersio`
      if (jsonObj.get("emersio") != null && !jsonObj.get("emersio").isJsonNull()) {
        PickEmersio.validateJsonElement(jsonObj.get("emersio"));
      }
      // validate the optional field `pick_ew`
      if (jsonObj.get("pick_ew") != null && !jsonObj.get("pick_ew").isJsonNull()) {
        ObjectPickEw.validateJsonElement(jsonObj.get("pick_ew"));
      }
      // validate the optional field `localspace`
      if (jsonObj.get("localspace") != null && !jsonObj.get("localspace").isJsonNull()) {
        ObjectLocalspace.validateJsonElement(jsonObj.get("localspace"));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ObjectProvenance.validateJsonElement(jsonObj.get("provenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectPick.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectPick' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectPick> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectPick.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectPick>() {
           @Override
           public void write(JsonWriter out, ObjectPick value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectPick read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ObjectPick instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectPick given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectPick
  * @throws IOException if the JSON string is invalid with respect to ObjectPick
  */
  public static ObjectPick fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectPick.class);
  }

 /**
  * Convert an instance of ObjectPick to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

