/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.22.2
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.ingv.dante.model.ObjectAmplitude;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectStationmagnitude
 */
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T12:56:18.203916966Z[Etc/UTC]")
public class ObjectStationmagnitude {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_EP_DISTANCE_KM = "ep_distance_km";
  @SerializedName(SERIALIZED_NAME_EP_DISTANCE_KM)
  private Float epDistanceKm;

  public static final String SERIALIZED_NAME_ORIG_DISTANCE_KM = "orig_distance_km";
  @SerializedName(SERIALIZED_NAME_ORIG_DISTANCE_KM)
  private Double origDistanceKm;

  public static final String SERIALIZED_NAME_AZIMUT = "azimut";
  @SerializedName(SERIALIZED_NAME_AZIMUT)
  private Float azimut;

  public static final String SERIALIZED_NAME_MAG = "mag";
  @SerializedName(SERIALIZED_NAME_MAG)
  private Double mag;

  public static final String SERIALIZED_NAME_ERR_MAG = "err_mag";
  @SerializedName(SERIALIZED_NAME_ERR_MAG)
  private Double errMag;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public static final String SERIALIZED_NAME_MAG_CORRECTION = "mag_correction";
  @SerializedName(SERIALIZED_NAME_MAG_CORRECTION)
  private Double magCorrection;

  public static final String SERIALIZED_NAME_IS_USED = "is_used";
  @SerializedName(SERIALIZED_NAME_IS_USED)
  private Boolean isUsed = false;

  public static final String SERIALIZED_NAME_TYPE_MAGNITUDE = "type_magnitude";
  @SerializedName(SERIALIZED_NAME_TYPE_MAGNITUDE)
  private String typeMagnitude;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_AMPLITUDE = "amplitude";
  @SerializedName(SERIALIZED_NAME_AMPLITUDE)
  private ObjectAmplitude amplitude;

  public ObjectStationmagnitude() {
  }

  public ObjectStationmagnitude(
     Long id, 
     OffsetDateTime modified, 
     OffsetDateTime inserted
  ) {
    this();
    this.id = id;
    this.modified = modified;
    this.inserted = inserted;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



  public ObjectStationmagnitude epDistanceKm(Float epDistanceKm) {
    this.epDistanceKm = epDistanceKm;
    return this;
  }

   /**
   * Distance from epicenter of the station expressed in Km | double
   * @return epDistanceKm
  **/
  @javax.annotation.Nullable
  public Float getEpDistanceKm() {
    return epDistanceKm;
  }

  public void setEpDistanceKm(Float epDistanceKm) {
    this.epDistanceKm = epDistanceKm;
  }


  public ObjectStationmagnitude origDistanceKm(Double origDistanceKm) {
    this.origDistanceKm = origDistanceKm;
    return this;
  }

   /**
   * Distance from origin of the station (km) | double
   * @return origDistanceKm
  **/
  @javax.annotation.Nullable
  public Double getOrigDistanceKm() {
    return origDistanceKm;
  }

  public void setOrigDistanceKm(Double origDistanceKm) {
    this.origDistanceKm = origDistanceKm;
  }


  public ObjectStationmagnitude azimut(Float azimut) {
    this.azimut = azimut;
    return this;
  }

   /**
   * Station origin azimut | double
   * @return azimut
  **/
  @javax.annotation.Nullable
  public Float getAzimut() {
    return azimut;
  }

  public void setAzimut(Float azimut) {
    this.azimut = azimut;
  }


  public ObjectStationmagnitude mag(Double mag) {
    this.mag = mag;
    return this;
  }

   /**
   * Amplitude magnitude value | double
   * @return mag
  **/
  @javax.annotation.Nonnull
  public Double getMag() {
    return mag;
  }

  public void setMag(Double mag) {
    this.mag = mag;
  }


  public ObjectStationmagnitude errMag(Double errMag) {
    this.errMag = errMag;
    return this;
  }

   /**
   * magnitude error | double
   * @return errMag
  **/
  @javax.annotation.Nullable
  public Double getErrMag() {
    return errMag;
  }

  public void setErrMag(Double errMag) {
    this.errMag = errMag;
  }


  public ObjectStationmagnitude weight(Double weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Weight | double
   * @return weight
  **/
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }


  public ObjectStationmagnitude magCorrection(Double magCorrection) {
    this.magCorrection = magCorrection;
    return this;
  }

   /**
   * magnitude correction | double
   * @return magCorrection
  **/
  @javax.annotation.Nullable
  public Double getMagCorrection() {
    return magCorrection;
  }

  public void setMagCorrection(Double magCorrection) {
    this.magCorrection = magCorrection;
  }


  public ObjectStationmagnitude isUsed(Boolean isUsed) {
    this.isUsed = isUsed;
    return this;
  }

   /**
   * true if used | boolean
   * @return isUsed
  **/
  @javax.annotation.Nullable
  public Boolean getIsUsed() {
    return isUsed;
  }

  public void setIsUsed(Boolean isUsed) {
    this.isUsed = isUsed;
  }


  public ObjectStationmagnitude typeMagnitude(String typeMagnitude) {
    this.typeMagnitude = typeMagnitude;
    return this;
  }

   /**
   * Type of the magnitude | varchar(255)
   * @return typeMagnitude
  **/
  @javax.annotation.Nullable
  public String getTypeMagnitude() {
    return typeMagnitude;
  }

  public void setTypeMagnitude(String typeMagnitude) {
    this.typeMagnitude = typeMagnitude;
  }


   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }



   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInserted() {
    return inserted;
  }



  public ObjectStationmagnitude amplitude(ObjectAmplitude amplitude) {
    this.amplitude = amplitude;
    return this;
  }

   /**
   * Get amplitude
   * @return amplitude
  **/
  @javax.annotation.Nullable
  public ObjectAmplitude getAmplitude() {
    return amplitude;
  }

  public void setAmplitude(ObjectAmplitude amplitude) {
    this.amplitude = amplitude;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ObjectStationmagnitude instance itself
   */
  public ObjectStationmagnitude putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectStationmagnitude objectStationmagnitude = (ObjectStationmagnitude) o;
    return Objects.equals(this.id, objectStationmagnitude.id) &&
        Objects.equals(this.epDistanceKm, objectStationmagnitude.epDistanceKm) &&
        Objects.equals(this.origDistanceKm, objectStationmagnitude.origDistanceKm) &&
        Objects.equals(this.azimut, objectStationmagnitude.azimut) &&
        Objects.equals(this.mag, objectStationmagnitude.mag) &&
        Objects.equals(this.errMag, objectStationmagnitude.errMag) &&
        Objects.equals(this.weight, objectStationmagnitude.weight) &&
        Objects.equals(this.magCorrection, objectStationmagnitude.magCorrection) &&
        Objects.equals(this.isUsed, objectStationmagnitude.isUsed) &&
        Objects.equals(this.typeMagnitude, objectStationmagnitude.typeMagnitude) &&
        Objects.equals(this.modified, objectStationmagnitude.modified) &&
        Objects.equals(this.inserted, objectStationmagnitude.inserted) &&
        Objects.equals(this.amplitude, objectStationmagnitude.amplitude)&&
        Objects.equals(this.additionalProperties, objectStationmagnitude.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, epDistanceKm, origDistanceKm, azimut, mag, errMag, weight, magCorrection, isUsed, typeMagnitude, modified, inserted, amplitude, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectStationmagnitude {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    epDistanceKm: ").append(toIndentedString(epDistanceKm)).append("\n");
    sb.append("    origDistanceKm: ").append(toIndentedString(origDistanceKm)).append("\n");
    sb.append("    azimut: ").append(toIndentedString(azimut)).append("\n");
    sb.append("    mag: ").append(toIndentedString(mag)).append("\n");
    sb.append("    errMag: ").append(toIndentedString(errMag)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    magCorrection: ").append(toIndentedString(magCorrection)).append("\n");
    sb.append("    isUsed: ").append(toIndentedString(isUsed)).append("\n");
    sb.append("    typeMagnitude: ").append(toIndentedString(typeMagnitude)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    amplitude: ").append(toIndentedString(amplitude)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("ep_distance_km");
    openapiFields.add("orig_distance_km");
    openapiFields.add("azimut");
    openapiFields.add("mag");
    openapiFields.add("err_mag");
    openapiFields.add("weight");
    openapiFields.add("mag_correction");
    openapiFields.add("is_used");
    openapiFields.add("type_magnitude");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("amplitude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mag");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectStationmagnitude
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectStationmagnitude.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectStationmagnitude is not found in the empty JSON string", ObjectStationmagnitude.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjectStationmagnitude.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type_magnitude") != null && !jsonObj.get("type_magnitude").isJsonNull()) && !jsonObj.get("type_magnitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_magnitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_magnitude").toString()));
      }
      // validate the optional field `amplitude`
      if (jsonObj.get("amplitude") != null && !jsonObj.get("amplitude").isJsonNull()) {
        ObjectAmplitude.validateJsonElement(jsonObj.get("amplitude"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectStationmagnitude.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectStationmagnitude' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectStationmagnitude> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectStationmagnitude.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectStationmagnitude>() {
           @Override
           public void write(JsonWriter out, ObjectStationmagnitude value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectStationmagnitude read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ObjectStationmagnitude instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectStationmagnitude given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectStationmagnitude
  * @throws IOException if the JSON string is invalid with respect to ObjectStationmagnitude
  */
  public static ObjectStationmagnitude fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectStationmagnitude.class);
  }

 /**
  * Convert an instance of ObjectStationmagnitude to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

